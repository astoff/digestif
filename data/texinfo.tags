-- Copyright 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
-- Copyright 2019 Augusto Stoffel
-- SPDX-License-Identifier: GFDL-1.3-only
--
-- Adapted from the GNU Texinfo manual, which can be found at
-- https://www.gnu.org/software/texinfo/manual/texinfo/.
documentation = {
  summary = "GNU Texinfo manual",
  uri = "https://www.gnu.org/software/texinfo/manual/texinfo/texinfo.pdf"
}

commands = {
  [" "] = {
    summary = "An '@' followed by a space, tab, or newline produces a normal, stretchable, interword space.",
    documentation = "info:texinfo#Multiple Spaces"
  },

  ["!"] = {
    summary = "Produce an exclamation point that ends a sentence (usually after an end-of-sentence capital letter).",
    documentation = "info:texinfo#Ending a Sentence"
  },

  ["\""] = {
    summary = "Generate an umlaut or acute accent, respectively, over the next character, as in ö and ó.",
    documentation = "info:texinfo#Inserting Accents"
  },

  ["'"] = {
    summary = "Generate an umlaut or acute accent, respectively, over the next character, as in ö and ó.",
    documentation = "info:texinfo#Inserting Accents"
  },

  ["&"] = {
    summary = "Generate an ampersand.",
    documentation = "info:texinfo#Inserting an Ampersand"
  },

  ampchar = {
    arguments = {{meta = ""}},
    summary = "Generate an ampersand.",
    documentation = "info:texinfo#Inserting an Ampersand"
  },

  ["*"] = {
    summary = "Force a line break.",
    documentation = "info:texinfo#Line Breaks"
  },

  [","] = {
    arguments = {meta = "C"},
    summary = "Generate a cedilla accent under C, as in ç.",
    documentation = "info:texinfo#Inserting Accents"
  },

  ["-"] = {
    summary = "Insert a discretionary hyphenation point.",
    documentation = "info:texinfo#@- @hyphenation"
  },

  ["."] = {
    summary = "Produce a period that ends a sentence (usually after an end-of-sentence capital letter).",
    documentation = "info:texinfo#Ending a Sentence"
  },

  ["/"] = {
    summary = "Produces no output, but allows a line break.",
    documentation = "info:texinfo#Line Breaks"
  },

  [":"] = {
    summary = "Tell TeX to refrain from inserting extra whitespace after an immediately preceding period, question mark, exclamation mark, or colon, as TeX normally would.",
    documentation = "info:texinfo#Not Ending a Sentence"
  },

  ["="] = {
    summary = "Generate a macron (bar) accent over the next character, as in ō.",
    documentation = "info:texinfo#Inserting Accents"
  },

  ["?"] = {
    summary = "Produce a question mark that ends a sentence (usually after an end-of-sentence capital letter).",
    documentation = "info:texinfo#Ending a Sentence"
  },

  ["@"] = {
    summary = "Insert an at sign, '@'.",
    documentation = "info:texinfo#Inserting an Atsign"
  },

  atchar = {
    arguments = {{meta = ""}},
    summary = "Insert an at sign, '@'.",
    documentation = "info:texinfo#Inserting an Atsign"
  },

  ["\\"] = {
    summary = "Insert a backslash, '\'; '@backslashchar{}' works anywhere, while '@\' works only inside '@math'.",
    documentation = "info:texinfo#Inserting a Backslash"
  },

  backslashchar = {
    arguments = {{meta = ""}},
    summary = "Insert a backslash, '\'; '@backslashchar{}' works anywhere, while '@\' works only inside '@math'.",
    documentation = "info:texinfo#Inserting a Backslash"
  },

  ["^"] = {
    summary = "Generate a circumflex (hat) or grave accent, respectively, over the next character, as in ô and è.",
    documentation = "info:texinfo#Inserting Accents"
  },

  ["`"] = {
    summary = "Generate a circumflex (hat) or grave accent, respectively, over the next character, as in ô and è.",
    documentation = "info:texinfo#Inserting Accents"
  },

  ["{"] = {
    summary = "Insert a left brace, '{'.",
    documentation = "info:texinfo#Inserting Braces"
  },

  lbracechar = {
    arguments = {{meta = ""}},
    summary = "Insert a left brace, '{'.",
    documentation = "info:texinfo#Inserting Braces"
  },

  ["}"] = {
    summary = "Insert a right brace, '}'.",
    documentation = "info:texinfo#Inserting Braces"
  },

  rbracechar = {
    arguments = {{meta = ""}},
    summary = "Insert a right brace, '}'.",
    documentation = "info:texinfo#Inserting Braces"
  },

  ["~"] = {
    summary = "Generate a tilde accent over the next character, as in Ñ.",
    documentation = "info:texinfo#Inserting Accents"
  },

  AA = {
    arguments = {{meta = ""}},
    summary = "Generate the uppercase and lowercase Scandinavian A-ring letters, respectively: Å, å.",
    documentation = "info:texinfo#Inserting Accents"
  },

  aa = {
    arguments = {{meta = ""}},
    summary = "Generate the uppercase and lowercase Scandinavian A-ring letters, respectively: Å, å.",
    documentation = "info:texinfo#Inserting Accents"
  },

  abbr = {
    arguments = {
      {meta = "ABBREVIATION"}
    },
    summary = "Indicate a general abbreviation, such as 'Comput.'.",
    documentation = "info:texinfo#@abbr"
  },

  acronym = {
    arguments = {
      {meta = "ACRONYM"}
    },
    summary = "Indicate an acronym in all capital letters, such as 'NASA'.",
    documentation = "info:texinfo#@acronym"
  },

  AE = {
    arguments = {{meta = ""}},
    summary = "Generate the uppercase and lowercase AE ligatures, respectively: Æ, æ.",
    documentation = "info:texinfo#Inserting Accents"
  },

  ae = {
    arguments = {{meta = ""}},
    summary = "Generate the uppercase and lowercase AE ligatures, respectively: Æ, æ.",
    documentation = "info:texinfo#Inserting Accents"
  },

  afivepaper = {
    summary = "Change page dimensions for the A5 paper size.",
    documentation = "info:texinfo#A4 Paper"
  },

  afourlatex = {
    summary = "Change page dimensions for the A4 paper size.",
    documentation = "info:texinfo#A4 Paper"
  },

  afourpaper = {
    summary = "Change page dimensions for the A4 paper size.",
    documentation = "info:texinfo#A4 Paper"
  },

  afourwide = {
    summary = "Change page dimensions for the A4 paper size.",
    documentation = "info:texinfo#A4 Paper"
  },

  alias = {
    arguments = {
      {meta = "NEW", delimiters = {"", "="}},
      {meta = "EXISTING", delimiters = {"", "\n"}}
    },
    summary = "Make the command '@NEW' a synonym for the existing command '@EXISTING'.",
    documentation = "info:texinfo#@alias"
  },

  allowcodebreaks = {
    arguments = {
      {meta = "TRUE-FALSE", delimiters = {"", "\n"}}
    },
    summary = "Control breaking at '-' and '_' in TeX.",
    documentation = "info:texinfo#@allowcodebreaks"
  },

  anchor = {
    arguments = {
      {meta = "NAME"}
    },
    summary = "Define NAME as the current location for use as a cross-reference target.",
    documentation = "info:texinfo#@anchor"
  },

  appendix = {
    arguments = {
      {meta = "TITLE", delimiters = {"", "\n"}}
    },
    summary = "Begin an appendix.  The title appears in the table of contents.  In Info, the title is underlined with asterisks.",
    documentation = "info:texinfo#@unnumbered @appendix"
  },

  appendixsec = {
    arguments = {
      {meta = "TITLE", delimiters = {"", "\n"}}
    },
    summary = "Begin an appendix section within an appendix.  The section title appears in the table of contents.  In Info, the title is underlined with equal signs.  '@appendixsection' is a longer spelling of the '@appendixsec' command.",
    documentation = "info:texinfo#@unnumberedsec @appendixsec @heading"
  },

  appendixsection = {
    arguments = {
      {meta = "TITLE", delimiters = {"", "\n"}}
    },
    summary = "Begin an appendix section within an appendix.  The section title appears in the table of contents.  In Info, the title is underlined with equal signs.  '@appendixsection' is a longer spelling of the '@appendixsec' command.",
    documentation = "info:texinfo#@unnumberedsec @appendixsec @heading"
  },

  appendixsubsec = {
    arguments = {
      {meta = "TITLE", delimiters = {"", "\n"}}
    },
    summary = "Begin an appendix subsection.  The title appears in the table of contents.  In Info, the title is underlined with hyphens.",
    documentation = "info:texinfo#@unnumberedsubsec @appendixsubsec @subheading"
  },

  appendixsubsubsec = {
    arguments = {
      {meta = "TITLE", delimiters = {"", "\n"}}
    },
    summary = "Begin an appendix subsubsection.  The title appears in the table of contents.  In Info, the title is underlined with periods.",
    documentation = "info:texinfo#@subsubsection"
  },

  arrow = {
    arguments = {{meta = ""}},
    summary = "Generate a right arrow glyph: '->'.  Used by default for '@click'.",
    documentation = "info:texinfo#Click Sequences"
  },

  asis = {
    summary = "Used following '@table', '@ftable', and '@vtable' to print the table's first column without highlighting (\"as is\").",
    documentation = "info:texinfo#@asis"
  },

  author = {
    arguments = {
      {meta = "AUTHOR", delimiters = {"", "\n"}}
    },
    summary = "Typeset AUTHOR flushleft and underline it.",
    documentation = "info:texinfo#@title @subtitle @author"
  },

  b = {
    arguments = {
      {meta = "TEXT"}
    },
    summary = "Set TEXT in a bold font.  No effect in Info.",
    documentation = "info:texinfo#Fonts"
  },

  bullet = {
    arguments = {{meta = ""}},
    summary = "Generate a large round dot, * ('*' in Info).  Often used with '@table'.",
    documentation = "info:texinfo#@bullet"
  },

  bye = {
    summary = "Stop formatting a file.  The formatters do not see anything in the input file following '@bye'.",
    documentation = "info:texinfo#Ending a File"
  },

  c = {
    arguments = {
      {meta = "COMMENT", delimiters = {"", "\n"}}
    },
    summary = "Begin a comment in Texinfo.  The rest of the line does not appear in any output.  A synonym for '@comment'.  'DEL' also starts a comment.",
    documentation = "info:texinfo#Comments"
  },

  caption = {
    summary = "Define the full caption for a '@float'.",
    documentation = "info:texinfo#@caption @shortcaption"
  },

  center = {
    arguments = {
      {meta = "LINE-OF-TEXT", delimiters = {"", "\n"}}
    },
    summary = "Center the line of text following the command.",
    documentation = "info:texinfo#@titlefont @center @sp"
  },

  centerchap = {
    arguments = {
      {meta = "LINE-OF-TEXT", delimiters = {"", "\n"}}
    },
    summary = "Like '@chapter', but centers the chapter title.",
    documentation = "info:texinfo#@chapter"
  },

  chapheading = {
    arguments = {
      {meta = "TITLE", delimiters = {"", "\n"}}
    },
    summary = "Print an unnumbered chapter-like heading, but omit from the table of contents.  In Info, the title is underlined with asterisks.",
    documentation = "info:texinfo#@majorheading @chapheading"
  },

  chapter = {
    arguments = {
      {meta = "TITLE", delimiters = {"", "\n"}}
    },
    summary = "Begin a numbered chapter.  The chapter title appears in the table of contents.  In Info, the title is underlined with asterisks.",
    documentation = "info:texinfo#@chapter"
  },

  cindex = {
    arguments = {
      {meta = "ENTRY", delimiters = {"", "\n"}}
    },
    summary = "Add ENTRY to the index of concepts.",
    documentation = "info:texinfo#Index Entries"
  },

  cite = {
    arguments = {
      {meta = "REFERENCE"}
    },
    summary = "Highlight the name of a book or other reference that has no companion Info file.",
    documentation = "info:texinfo#@cite"
  },

  clear = {
    arguments = {
      {meta = "FLAG", delimiters = {"", "\n"}}
    },
    summary = "Unset FLAG, preventing the Texinfo formatting commands from formatting text between subsequent pairs of '@ifset FLAG' and '@end ifset' commands, and preventing '@value{FLAG}' from expanding to the value to which FLAG is set.",
    documentation = "info:texinfo#@set @clear @value"
  },

  click = {
    arguments = {{meta = ""}},
    summary = "Represent a single \"click\" in a GUI.  Used within '@clicksequence'.",
    documentation = "info:texinfo#Click Sequences"
  },

  clicksequence = {
    arguments = {
      {meta = "ACTION"},
      {literal = "@click{}"},
      {meta = "ACTION"}
    },
    summary = "Represent a sequence of clicks in a GUI.",
    documentation = "info:texinfo#Click Sequences"
  },

  clickstyle = {
    arguments = {
      {meta = "@CMD"}
    },     
    summary = "Execute @CMD for each '@click'; the default is '@arrow'.  The usual following empty braces on @CMD are omitted.",
    documentation = "info:texinfo#Click Sequences"
  },

  code = {
    arguments = {
      {meta = "SAMPLE-CODE"}
    },
    summary = "Indicate an expression, a syntactically complete token of a program, or a program name.  Unquoted in Info output.",
    documentation = "info:texinfo#@code"
  },

  codequotebacktick = {
    arguments = {
      {meta = "ON-OFF", delimiters = {"", "\n"}}
    },
    summary = "Control output of '`' and ''' in code examples.",
    documentation = "info:texinfo#Inserting Quote Characters"
  },

  codequoteundirected = {
    arguments = {
      {meta = "ON-OFF", delimiters = {"", "\n"}}
    },
    summary = "Control output of '`' and ''' in code examples.",
    documentation = "info:texinfo#Inserting Quote Characters"
  },

  comma = {
    arguments = {{meta = ""}},
    summary = "Insert a comma ',' character; only needed when a literal comma would be taken as an argument separator.",
    documentation = "info:texinfo#Inserting a Comma"
  },

  command = {
    arguments = {
      {meta = "COMMAND-NAME"}
    },
    summary = "Indicate a command name, such as 'ls'.",
    documentation = "info:texinfo#@command"
  },

  comment = {
    arguments = {
      {meta = "COMMENT", delimiters = {"", "\n"}}
    },
    summary = "Begin a comment in Texinfo.  The rest of the line does not appear in any output.  A synonym for '@c'.",
    documentation = "info:texinfo#Comments"
  },

  contents = {
    summary = "Print a complete table of contents.  Has no effect in Info, which uses menus instead.",
    documentation = "info:texinfo#Contents"
  },

  copyright = {
    arguments = {{meta = ""}},
    summary = "Generate the copyright symbol (C).",
    documentation = "info:texinfo#@copyright"
  },

  defcodeindex = {
    arguments = {
      {meta = "INDEX-NAME", delimiters = {"", "\n"}}
    },
    summary = "Define a new index and its indexing command.  Print entries in an '@code' font.",
    documentation = "info:texinfo#New Indices"
  },

  defcv = {
    arguments = {
      {meta = "CATEGORY", delimiters = {"", " "}},
      {meta = "CLASS", delimiters = {"", " "}},
      {meta = "NAME", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a variable associated with a class in object-oriented programming.  Takes three arguments: the category of thing being defined, the class to which it belongs, and its name.",
    documentation = "info:texinfo#Definition Commands"
  },

  defcvx = {
    arguments = {
      {meta = "CATEGORY", delimiters = {"", " "}},
      {meta = "CLASS", delimiters = {"", " "}},
      {meta = "NAME", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a variable associated with a class in object-oriented programming.  Takes three arguments: the category of thing being defined, the class to which it belongs, and its name.",
    documentation = "info:texinfo#Definition Commands"
  },

  deffn = {
    arguments = {
      {meta = "CATEGORY", delimiters = {"", " "}},
      {meta = "NAME", delimiters = {"", " "}},
      {meta = "ARGUMENTS...", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a function, interactive command, or similar entity that may take arguments.  '@deffn' takes as arguments the category of entity being described, the name of this particular entity, and its arguments, if any.",
    documentation = "info:texinfo#Definition Commands"
  },

  deffnx = {
    arguments = {
      {meta = "CATEGORY", delimiters = {"", " "}},
      {meta = "NAME", delimiters = {"", " "}},
      {meta = "ARGUMENTS...", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a function, interactive command, or similar entity that may take arguments.  '@deffn' takes as arguments the category of entity being described, the name of this particular entity, and its arguments, if any.",
    documentation = "info:texinfo#Definition Commands"
  },

  defindex = {
    arguments = {
      {meta = "INDEX-NAME", delimiters = {"", "\n"}}
    },
    summary = "Define a new index and its indexing command.  Print entries in a roman font.",
    documentation = "info:texinfo#New Indices"
  },

  definfoenclose = {
    arguments = {
      {meta = "NEWCMD,", delimiters = {"", " "}},
      {meta = "BEFORE,", delimiters = {"", " "}},
      {meta = "AFTER", delimiters = {"", "\n"}}
    },
    summary = "Must be used within '@ifinfo'; create a new command '@NEWCMD' for Info that marks text by enclosing it in strings that precede and follow the text.",
    documentation = "info:texinfo#@definfoenclose"
  },

  defivar = {
    arguments = {
      {meta = "CLASS", delimiters = {"", " "}},
      {meta = "INSTANCE-VARIABLE-NAME", delimiters = {"", "\n"}}
    },
    summary = "Format a description for an instance variable in object-oriented programming.  The command is equivalent to '@defcv {Instance Variable} ...'.",
    documentation = "info:texinfo#Definition Commands"
  },

  defivarx = {
    arguments = {
      {meta = "CLASS", delimiters = {"", " "}},
      {meta = "INSTANCE-VARIABLE-NAME", delimiters = {"", "\n"}}
    },
    summary = "Format a description for an instance variable in object-oriented programming.  The command is equivalent to '@defcv {Instance Variable} ...'.",
    documentation = "info:texinfo#Definition Commands"
  },

  defmac = {
    arguments = {
      {meta = "MACRONAME", delimiters = {"", " "}},
      {meta = "ARGUMENTS...", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a macro; equivalent to '@deffn Macro ...'.",
    documentation = "info:texinfo#Definition Commands"
  },

  defmacx = {
    arguments = {
      {meta = "MACRONAME", delimiters = {"", " "}},
      {meta = "ARGUMENTS...", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a macro; equivalent to '@deffn Macro ...'.",
    documentation = "info:texinfo#Definition Commands"
  },

  defmethod = {
    arguments = {
      {meta = "CLASS", delimiters = {"", " "}},
      {meta = "METHOD-NAME", delimiters = {"", " "}},
      {meta = "ARGUMENTS...", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a method in object-oriented programming; equivalent to '@defop Method ...'.",
    documentation = "info:texinfo#Definition Commands"
  },

  defmethodx = {
    arguments = {
      {meta = "CLASS", delimiters = {"", " "}},
      {meta = "METHOD-NAME", delimiters = {"", " "}},
      {meta = "ARGUMENTS...", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a method in object-oriented programming; equivalent to '@defop Method ...'.",
    documentation = "info:texinfo#Definition Commands"
  },

  defop = {
    arguments = {
      {meta = "CATEGORY", delimiters = {"", " "}},
      {meta = "CLASS", delimiters = {"", " "}},
      {meta = "NAME", delimiters = {"", " "}},
      {meta = "ARGUMENTS...", delimiters = {"", "\n"}}
    },
    summary = "Format a description for an operation in object-oriented programming.  '@defop' takes as arguments the name of the category of operation, the name of the operation's class, the name of the operation, and its arguments, if any.",
    documentation = "info:texinfo#Definition Commands"
  },

  defopx = {
    arguments = {
      {meta = "CATEGORY", delimiters = {"", " "}},
      {meta = "CLASS", delimiters = {"", " "}},
      {meta = "NAME", delimiters = {"", " "}},
      {meta = "ARGUMENTS...", delimiters = {"", "\n"}}
    },
    summary = "Format a description for an operation in object-oriented programming.  '@defop' takes as arguments the name of the category of operation, the name of the operation's class, the name of the operation, and its arguments, if any.",
    documentation = "info:texinfo#Definition Commands"
  },

  defopt = {
    arguments = {
      {meta = "OPTION-NAME", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a user option; equivalent to '@defvr {User Option} ...'.",
    documentation = "info:texinfo#Definition Commands"
  },

  defoptx = {
    arguments = {
      {meta = "OPTION-NAME", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a user option; equivalent to '@defvr {User Option} ...'.",
    documentation = "info:texinfo#Definition Commands"
  },

  defspec = {
    arguments = {
      {meta = "SPECIAL-FORM-NAME", delimiters = {"", " "}},
      {meta = "ARGUMENTS...", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a special form; equivalent to '@deffn {Special Form} ...'.",
    documentation = "info:texinfo#Definition Commands"
  },

  defspecx = {
    arguments = {
      {meta = "SPECIAL-FORM-NAME", delimiters = {"", " "}},
      {meta = "ARGUMENTS...", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a special form; equivalent to '@deffn {Special Form} ...'.",
    documentation = "info:texinfo#Definition Commands"
  },

  deftp = {
    arguments = {
      {meta = "CATEGORY", delimiters = {"", " "}},
      {meta = "NAME-OF-TYPE", delimiters = {"", " "}},
      {meta = "ATTRIBUTES...", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a data type; its arguments are the category, the name of the type (e.g., 'int') , and then the names of attributes of objects of that type.",
    documentation = "info:texinfo#Definition Commands"
  },

  deftpx = {
    arguments = {
      {meta = "CATEGORY", delimiters = {"", " "}},
      {meta = "NAME-OF-TYPE", delimiters = {"", " "}},
      {meta = "ATTRIBUTES...", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a data type; its arguments are the category, the name of the type (e.g., 'int') , and then the names of attributes of objects of that type.",
    documentation = "info:texinfo#Definition Commands"
  },

  deftypecv = {
    arguments = {
      {meta = "CATEGORY", delimiters = {"", " "}},
      {meta = "CLASS", delimiters = {"", " "}},
      {meta = "DATA-TYPE", delimiters = {"", " "}},
      {meta = "NAME", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a typed class variable in object-oriented programming.",
    documentation = "info:texinfo#Definition Commands"
  },

  deftypecvx = {
    arguments = {
      {meta = "CATEGORY", delimiters = {"", " "}},
      {meta = "CLASS", delimiters = {"", " "}},
      {meta = "DATA-TYPE", delimiters = {"", " "}},
      {meta = "NAME", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a typed class variable in object-oriented programming.",
    documentation = "info:texinfo#Definition Commands"
  },

  deftypefn = {
    arguments = {
      {meta = "CATEGORY", delimiters = {"", " "}},
      {meta = "DATA-TYPE", delimiters = {"", " "}},
      {meta = "NAME", delimiters = {"", " "}},
      {meta = "ARGUMENTS...", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a function or similar entity that may take arguments and that is typed.  '@deftypefn' takes as arguments the category of entity being described, the type, the name of the entity, and its arguments, if any.",
    documentation = "info:texinfo#Definition Commands"
  },

  deftypefnx = {
    arguments = {
      {meta = "CATEGORY", delimiters = {"", " "}},
      {meta = "DATA-TYPE", delimiters = {"", " "}},
      {meta = "NAME", delimiters = {"", " "}},
      {meta = "ARGUMENTS...", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a function or similar entity that may take arguments and that is typed.  '@deftypefn' takes as arguments the category of entity being described, the type, the name of the entity, and its arguments, if any.",
    documentation = "info:texinfo#Definition Commands"
  },

  deftypefnnewline = {
    arguments = {
      {meta = "ON-OFF", delimiters = {"", "\n"}}
    },
    summary = "Specifies whether return types for '@deftypefn' and similar are printed on lines by themselves; default is off.",
    documentation = "info:texinfo#Typed Functions"
  },

  deftypefun = {
    arguments = {
      {meta = "DATA-TYPE", delimiters = {"", " "}},
      {meta = "FUNCTION-NAME", delimiters = {"", " "}},
      {meta = "ARGUMENTS...", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a function in a typed language.  The command is equivalent to '@deftypefn Function ...'.",
    documentation = "info:texinfo#Definition Commands"
  },

  deftypefunx = {
    arguments = {
      {meta = "DATA-TYPE", delimiters = {"", " "}},
      {meta = "FUNCTION-NAME", delimiters = {"", " "}},
      {meta = "ARGUMENTS...", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a function in a typed language.  The command is equivalent to '@deftypefn Function ...'.",
    documentation = "info:texinfo#Definition Commands"
  },

  deftypeivar = {
    arguments = {
      {meta = "CLASS", delimiters = {"", " "}},
      {meta = "DATA-TYPE", delimiters = {"", " "}},
      {meta = "VARIABLE-NAME", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a typed instance variable in object-oriented programming.",
    documentation = "info:texinfo#Definition Commands"
  },

  deftypeivarx = {
    arguments = {
      {meta = "CLASS", delimiters = {"", " "}},
      {meta = "DATA-TYPE", delimiters = {"", " "}},
      {meta = "VARIABLE-NAME", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a typed instance variable in object-oriented programming.",
    documentation = "info:texinfo#Definition Commands"
  },

  deftypemethod = {
    arguments = {
      {meta = "CLASS", delimiters = {"", " "}},
      {meta = "DATA-TYPE", delimiters = {"", " "}},
      {meta = "METHOD-NAME", delimiters = {"", " "}},
      {meta = "ARGUMENTS...", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a typed method in object-oriented programming.",
    documentation = "info:texinfo#Definition Commands"
  },

  deftypemethodx = {
    arguments = {
      {meta = "CLASS", delimiters = {"", " "}},
      {meta = "DATA-TYPE", delimiters = {"", " "}},
      {meta = "METHOD-NAME", delimiters = {"", " "}},
      {meta = "ARGUMENTS...", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a typed method in object-oriented programming.",
    documentation = "info:texinfo#Definition Commands"
  },

  deftypeop = {
    arguments = {
      {meta = "CATEGORY", delimiters = {"", " "}},
      {meta = "CLASS", delimiters = {"", " "}},
      {meta = "DATA-TYPE", delimiters = {"", " "}},
      {meta = "NAME", delimiters = {"", " "}},
      {meta = "ARGUMENTS...", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a typed operation in object-oriented programming.",
    documentation = "info:texinfo#Definition Commands"
  },

  deftypeopx = {
    arguments = {
      {meta = "CATEGORY", delimiters = {"", " "}},
      {meta = "CLASS", delimiters = {"", " "}},
      {meta = "DATA-TYPE", delimiters = {"", " "}},
      {meta = "NAME", delimiters = {"", " "}},
      {meta = "ARGUMENTS...", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a typed operation in object-oriented programming.",
    documentation = "info:texinfo#Definition Commands"
  },

  deftypevar = {
    arguments = {
      {meta = "DATA-TYPE", delimiters = {"", " "}},
      {meta = "VARIABLE-NAME", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a variable in a typed language.  The command is equivalent to '@deftypevr Variable ...'.",
    documentation = "info:texinfo#Definition Commands"
  },

  deftypevarx = {
    arguments = {
      {meta = "DATA-TYPE", delimiters = {"", " "}},
      {meta = "VARIABLE-NAME", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a variable in a typed language.  The command is equivalent to '@deftypevr Variable ...'.",
    documentation = "info:texinfo#Definition Commands"
  },

  deftypevr = {
    arguments = {
      {meta = "CATEGORY", delimiters = {"", " "}},
      {meta = "DATA-TYPE", delimiters = {"", " "}},
      {meta = "NAME", delimiters = {"", "\n"}}
    },
    summary = "Format a description for something like a variable in a typed language--an entity that records a value.  Takes as arguments the category of entity being described, the type, and the name of the entity.",
    documentation = "info:texinfo#Definition Commands"
  },

  deftypevrx = {
    arguments = {
      {meta = "CATEGORY", delimiters = {"", " "}},
      {meta = "DATA-TYPE", delimiters = {"", " "}},
      {meta = "NAME", delimiters = {"", "\n"}}
    },
    summary = "Format a description for something like a variable in a typed language--an entity that records a value.  Takes as arguments the category of entity being described, the type, and the name of the entity.",
    documentation = "info:texinfo#Definition Commands"
  },

  defun = {
    arguments = {
      {meta = "FUNCTION-NAME", delimiters = {"", " "}},
      {meta = "ARGUMENTS...", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a function; equivalent to '@deffn Function ...'.",
    documentation = "info:texinfo#Definition Commands"
  },

  defunx = {
    arguments = {
      {meta = "FUNCTION-NAME", delimiters = {"", " "}},
      {meta = "ARGUMENTS...", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a function; equivalent to '@deffn Function ...'.",
    documentation = "info:texinfo#Definition Commands"
  },

  defvar = {
    arguments = {
      {meta = "VARIABLE-NAME", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a variable; equivalent to '@defvr Variable ...'.",
    documentation = "info:texinfo#Definition Commands"
  },

  defvarx = {
    arguments = {
      {meta = "VARIABLE-NAME", delimiters = {"", "\n"}}
    },
    summary = "Format a description for a variable; equivalent to '@defvr Variable ...'.",
    documentation = "info:texinfo#Definition Commands"
  },

  defvr = {
    arguments = {
      {meta = "CATEGORY", delimiters = {"", " "}},
      {meta = "NAME", delimiters = {"", "\n"}}
    },
    summary = "Format a description for any kind of variable.  '@defvr' takes as arguments the category of the entity and the name of the entity.",
    documentation = "info:texinfo#Definition Commands"
  },

  defvrx = {
    arguments = {
      {meta = "CATEGORY", delimiters = {"", " "}},
      {meta = "NAME", delimiters = {"", "\n"}}
    },
    summary = "Format a description for any kind of variable.  '@defvr' takes as arguments the category of the entity and the name of the entity.",
    documentation = "info:texinfo#Definition Commands"
  },

  detailmenu = {
    summary = "Mark the (optional) detailed node listing in a master menu.",
    documentation = "info:texinfo#Master Menu Parts"
  },

  dfn = {
    arguments = {
      {meta = "TERM"}
    },
    summary = "Indicate the introductory or defining use of a term.",
    documentation = "info:texinfo#@dfn"
  },

  DH = {
    arguments = {{meta = ""}},
    summary = "Generate the uppercase and lowercase Icelandic letter eth, respectively: Ð, ð.",
    documentation = "info:texinfo#Inserting Accents"
  },

  dh = {
    arguments = {{meta = ""}},
    summary = "Generate the uppercase and lowercase Icelandic letter eth, respectively: Ð, ð.",
    documentation = "info:texinfo#Inserting Accents"
  },

  dircategory = {
    arguments = {
      {meta = "DIRPART", delimiters = {"", "\n"}}
    },
    summary = "Specify a part of the Info directory menu where this file's entry should go.",
    documentation = "info:texinfo#Installing Dir Entries"
  },

  dmn = {
    arguments = {
      {meta = "DIMENSION"}
    },
    summary = "Format a unit of measure, as in 12pt.  Causes TeX to insert a thin space before DIMENSION.  No effect in Info.",
    documentation = "info:texinfo#@dmn"
  },

  documentencoding = {
    arguments = {
      {meta = "ENC", delimiters = {"", "\n"}}
    },
    summary = "Declare the input encoding to be ENC.",
    documentation = "info:texinfo#@documentencoding"
  },

  documentlanguage = {
    arguments = {
      {meta = "CC", delimiters = {"", "\n"}}
    },
    summary = "Declare the document language as the two-character ISO-639 abbreviation CC.",
    documentation = "info:texinfo#@documentlanguage"
  },

  dotaccent = {
    arguments = {
      {meta = "C"}
    },
    summary = "Generate a dot accent over the character C, as in ȯ.",
    documentation = "info:texinfo#Inserting Accents"
  },

  dotless = {
    arguments = {
      {meta = "I-OR-J"}
    },
    summary = "Generate dotless i ('ı') and dotless j ('j').",
    documentation = "info:texinfo#Inserting Accents"
  },

  dots = {
    arguments = {{meta = ""}},
    summary = "Generate an ellipsis, '...'.",
    documentation = "info:texinfo#@dots"
  },

  email = {
    arguments = {
      {meta = "ADDRESS[, DISPLAYED-TEXT]"}
    },
    summary = "Indicate an electronic mail address.",
    documentation = "info:texinfo#@email"
  },

  emph = {
    arguments = {
      {meta = "TEXT"}
    },
    summary = "Emphasize TEXT, by using _italics_ where possible, and enclosing in asterisks in Info.",
    documentation = "info:texinfo#Emphasis"
  },

  ["end"] = {
    arguments = {
      {meta = "ENVIRONMENT", delimiters = {"", "\n"}}
    },
    summary = "Ends ENVIRONMENT, as in '@end example'.",
    documentation = "info:texinfo#Formatting Commands"
  },

  enddots = {
    arguments = {{meta = ""}},
    summary = "Generate an end-of-sentence ellipsis, like this: ...",
    documentation = "info:texinfo#@dots"
  },

  env = {
    arguments = {
      {meta = "ENVIRONMENT-VARIABLE"}
    },
    summary = "Indicate an environment variable name, such as 'PATH'.",
    documentation = "info:texinfo#@env"
  },

  equiv = {
    arguments = {{meta = ""}},
    summary = "Indicate to the reader the exact equivalence of two forms with a glyph: '=='.",
    documentation = "info:texinfo#@equiv"
  },

  error = {
    arguments = {{meta = ""}},
    summary = "Indicate to the reader with a glyph that the following text is an error message: 'error->'.",
    documentation = "info:texinfo#@error"
  },

  errormsg = {
    arguments = {
      {meta = "MSG"}
    },
    summary = "Report MSG as an error to standard error, and exit unsuccessfully.  Texinfo commands within MSG are expanded to plain text.",
    documentation = "info:texinfo#Conditionals"
  },

  euro = {
    arguments = {{meta = ""}},
    summary = "Generate the Euro currency sign.",
    documentation = "info:texinfo#@euro"
  },

  evenfooting = {
    arguments = {
      {meta = "LEFT", delimiters = {"", "@|"}},
      {meta = "CENTER", delimiters = {"", "@|"}},
      {meta = "RIGHT", delimiters = {"", "\n"}}
    },
    summary = "Specify page footings resp. headings for even-numbered (left-hand) pages.",
    documentation = "info:texinfo#Custom Headings"
  },

  evenheading = {
    arguments = {
      {meta = "LEFT", delimiters = {"", "@|"}},
      {meta = "CENTER", delimiters = {"", "@|"}},
      {meta = "RIGHT", delimiters = {"", "\n"}}
    },
    summary = "Specify page footings resp. headings for even-numbered (left-hand) pages.",
    documentation = "info:texinfo#Custom Headings"
  },

  everyfooting = {
    arguments = {
      {meta = "LEFT", delimiters = {"", "@|"}},
      {meta = "CENTER", delimiters = {"", "@|"}},
      {meta = "RIGHT", delimiters = {"", "\n"}}
    },
    summary = "Specify page footings resp. headings for every page.  Not relevant to Info.",
    documentation = "info:texinfo#Custom Headings"
  },

  everyheading = {
    arguments = {
      {meta = "LEFT", delimiters = {"", "@|"}},
      {meta = "CENTER", delimiters = {"", "@|"}},
      {meta = "RIGHT", delimiters = {"", "\n"}}
    },
    summary = "Specify page footings resp. headings for every page.  Not relevant to Info.",
    documentation = "info:texinfo#Custom Headings"
  },

  exampleindent = {
    arguments = {
      {meta = "INDENT", delimiters = {"", "\n"}}
    },
    summary = "Indent example-like environments by INDENT number of spaces (perhaps 0).",
    documentation = "info:texinfo#@exampleindent"
  },

  exclamdown = {
    arguments = {{meta = ""}},
    summary = "Generate an upside-down exclamation point.",
    documentation = "info:texinfo#Inserting Accents"
  },

  exdent = {
    arguments = {
      {meta = "LINE-OF-TEXT", delimiters = {"", "\n"}}
    },
    summary = "Remove any indentation a line might have.",
    documentation = "info:texinfo#@exdent"
  },

  expansion = {
    arguments = {{meta = ""}},
    summary = "Indicate the result of a macro expansion to the reader with a special glyph: '==>'.",
    documentation = "info:texinfo#@expansion"
  },

  file = {
    arguments = {
      {meta = "FILENAME"}
    },
    summary = "Highlight the name of a file, buffer, node, directory, etc.",
    documentation = "info:texinfo#@file"
  },

  finalout = {
    summary = "Prevent TeX from printing large black warning rectangles beside over-wide lines.",
    documentation = "info:texinfo#Overfull hboxes"
  },

  findex = {
    arguments = {
      {meta = "ENTRY", delimiters = {"", "\n"}}
    },
    summary = "Add ENTRY to the index of functions.",
    documentation = "info:texinfo#Index Entries"
  },

  firstparagraphindent = {
    arguments = {
      {meta = "WORD", delimiters = {"", "\n"}}
    },
    summary = "Control indentation of the first paragraph after section headers according to WORD, one of 'none' or 'insert'.",
    documentation = "info:texinfo#@firstparagraphindent"
  },

  fonttextsize = {
    arguments = {
      {meta = "10-11", delimiters = {"", "\n"}}
    },
    summary = "Change the size of the main body font in the TeX output.",
    documentation = "info:texinfo#Fonts"
  },

  footnote = {
    arguments = {
      {meta = "TEXT-OF-FOOTNOTE"}
    },
    summary = "Enter a footnote.  Footnote text is printed at the bottom of the page by TeX; Info may format in either 'End' node or 'Separate' node style.",
    documentation = "info:texinfo#Footnotes"
  },

  footnotestyle = {
    arguments = {
      {meta = "STYLE", delimiters = {"", "\n"}}
    },
    summary = "Specify an Info file's footnote style, either 'end' for the end node style or 'separate' for the separate node style.",
    documentation = "info:texinfo#Footnotes"
  },

  frenchspacing = {
    arguments = {
      {meta = "ON-OFF", delimiters = {"", "\n"}}
    },
    summary = "Control spacing after punctuation.",
    documentation = "info:texinfo#@frenchspacing"
  },

  geq = {
    arguments = {{meta = ""}},
    summary = "Generate a greater-than-or-equal sign, '≥'.",
    documentation = "info:texinfo#@geq @leq"
  },

  guillemetleft = {
    arguments = {{meta = ""}},
    summary = "Double and single angle quotation marks: « » ‹ ›.  '@guillemotleft' and '@guillemotright' are synonyms for '@guillemetleft' and '@guillemetright'.",
    documentation = "info:texinfo#Inserting Quotation Marks"
  },

  guillemetright = {
    arguments = {{meta = ""}},
    summary = "Double and single angle quotation marks: « » ‹ ›.  '@guillemotleft' and '@guillemotright' are synonyms for '@guillemetleft' and '@guillemetright'.",
    documentation = "info:texinfo#Inserting Quotation Marks"
  },

  guillemotleft = {
    arguments = {{meta = ""}},
    summary = "Double and single angle quotation marks: « » ‹ ›.  '@guillemotleft' and '@guillemotright' are synonyms for '@guillemetleft' and '@guillemetright'.",
    documentation = "info:texinfo#Inserting Quotation Marks"
  },

  guillemotright = {
    arguments = {{meta = ""}},
    summary = "Double and single angle quotation marks: « » ‹ ›.  '@guillemotleft' and '@guillemotright' are synonyms for '@guillemetleft' and '@guillemetright'.",
    documentation = "info:texinfo#Inserting Quotation Marks"
  },

  guilsinglleft = {
    arguments = {{meta = ""}},
    summary = "Double and single angle quotation marks: « » ‹ ›.  '@guillemotleft' and '@guillemotright' are synonyms for '@guillemetleft' and '@guillemetright'.",
    documentation = "info:texinfo#Inserting Quotation Marks"
  },

  guilsinglright = {
    arguments = {{meta = ""}},
    summary = "Double and single angle quotation marks: « » ‹ ›.  '@guillemotleft' and '@guillemotright' are synonyms for '@guillemetleft' and '@guillemetright'.",
    documentation = "info:texinfo#Inserting Quotation Marks"
  },

  H = {
    arguments = {
      {meta = "C"}
    },
    summary = "Generate the long Hungarian umlaut accent over C, as in ő."
  },

  hashchar = {
    arguments = {{meta = ""}},
    summary = "Insert a hash '#' character; only needed when a literal hash would introduce '#line' directive.",
    documentation = "info:texinfo#Inserting a Hashsign"
  },

  heading = {
    arguments = {
      {meta = "TITLE", delimiters = {"", "\n"}}
    },
    summary = "Print an unnumbered section-like heading, but omit from the table of contents.  In Info, the title is underlined with equal signs.",
    documentation = "info:texinfo#@unnumberedsec @appendixsec @heading"
  },

  headings = {
    arguments = {
      {meta = "ON-OFF-SINGLE-DOUBLE", delimiters = {"", "\n"}}
    },
    summary = "Turn page headings on or off, and/or specify single-sided or double-sided page headings for printing.",
    documentation = "info:texinfo#@headings"
  },

  headitem = {
    summary = "Begin a heading row in a multitable.",
    documentation = "info:texinfo#Multitable Rows"
  },

  headitemfont = {
    arguments = {
      {meta = "TEXT"}
    },
    summary = "Set TEXT in the font used for multitable heading rows; mostly useful in multitable templates.",
    documentation = "info:texinfo#Multitable Rows"
  },

  hyphenation = {
    arguments = {
      {meta = "HY-PHEN-A-TED WORDS"}
    },
    summary = "Explicitly define hyphenation points.",
    documentation = "info:texinfo#@- @hyphenation"
  },

  i = {
    arguments = {
      {meta = "TEXT"}
    },
    summary = "Set TEXT in an italic font.  No effect in Info.",
    documentation = "info:texinfo#Fonts"
  },

  ifcommanddefined = {
    arguments = {
      {meta = "TXICMD", delimiters = {"", "\n"}}
    },
    summary = "If the Texinfo code '@TXICMD' is (not) defined, format the follow text.  Pair with the corresponding '@end ifcommand...'.",
    documentation = "info:texinfo#Testing for Texinfo Commands"
  },

  ifcommandnotdefined = {
    arguments = {
      {meta = "TXICMD", delimiters = {"", "\n"}}
    },
    summary = "If the Texinfo code '@TXICMD' is (not) defined, format the follow text.  Pair with the corresponding '@end ifcommand...'.",
    documentation = "info:texinfo#Testing for Texinfo Commands"
  },

  ifnotdocbook = {
    summary = "Begin text to be ignored in one output format but not the others.  '@ifnothtml' text is omitted from HTML output, etc.  Pair with the corresponding '@end ifnotFORMAT'.",
    documentation = "info:texinfo#Conditionals"
  },

  ifnothtml = {
    summary = "Begin text to be ignored in one output format but not the others.  '@ifnothtml' text is omitted from HTML output, etc.  Pair with the corresponding '@end ifnotFORMAT'.",
    documentation = "info:texinfo#Conditionals"
  },

  ifnotplaintext = {
    summary = "Begin text to be ignored in one output format but not the others.  '@ifnothtml' text is omitted from HTML output, etc.  Pair with the corresponding '@end ifnotFORMAT'.",
    documentation = "info:texinfo#Conditionals"
  },

  ifnottex = {
    summary = "Begin text to be ignored in one output format but not the others.  '@ifnothtml' text is omitted from HTML output, etc.  Pair with the corresponding '@end ifnotFORMAT'.",
    documentation = "info:texinfo#Conditionals"
  },

  ifnotxml = {
    summary = "Begin text to be ignored in one output format but not the others.  '@ifnothtml' text is omitted from HTML output, etc.  Pair with the corresponding '@end ifnotFORMAT'.",
    documentation = "info:texinfo#Conditionals"
  },

  image = {
    arguments = {
      {meta = "FILENAME, [WIDTH], [HEIGHT], [ALT], [EXT]"}
    },
    summary = "Include graphics image in external FILENAME scaled to the given WIDTH and/or HEIGHT, using ALT text and looking for 'FILENAME.EXT' in HTML.",
    documentation = "info:texinfo#Images"
  },

  include = {
    arguments = {
      {meta = "FILENAME", delimiters = {"", "\n"}}
    },
    summary = "Read the contents of Texinfo source file FILENAME.",
    documentation = "info:texinfo#Include Files"
  },

  indent = {
    summary = "Insert paragraph indentation.",
    documentation = "info:texinfo#@indent"
  },

  indicateurl = {
    arguments = {
      {meta = "INDICATEURL"}
    },
    summary = "Indicate text that is a uniform resource locator for the World Wide Web.",
    documentation = "info:texinfo#@indicateurl"
  },

  inforef = {
    arguments = {
      {meta = "NODE-NAME, [ENTRY-NAME], INFO-FILE-NAME"}
    },
    summary = "Make a cross-reference to an Info file for which there is no printed manual.",
    documentation = "info:texinfo#@inforef"
  },

  inlinefmt = {
    arguments = {
      {meta = "FMT, TEXT"}
    },
    summary = "Insert TEXT only if the output format is FMT.",
    documentation = "info:texinfo#Inline Conditionals"
  },

  inlinefmtifelse = {
    arguments = {
      {meta = "FMT, TEXT, ELSE-TEXT"}
    },
    summary = "Insert TEXT if the output format is FMT, else ELSE-TEXT."
  },

  inlineifclear = {
    arguments = {
      {meta = "VAR, TEXT"}
    },
    summary = "Insert TEXT only if the Texinfo variable VAR is (not) set."
  },

  inlineifset = {
    arguments = {
      {meta = "VAR, TEXT"}
    },
    summary = "Insert TEXT only if the Texinfo variable VAR is (not) set."
  },

  inlineraw = {
    arguments = {
      {meta = "FMT, RAW-TEXT"}
    },
    summary = "Insert TEXT as in a raw conditional, only if the output format is FMT."
  },

  input = {
    arguments = {
      {meta = "MACRO-DEFINITIONS-FILE", delimiters = {"", "\n"}},
    },
    summary = "Use the specified macro definitions file.  This command is used only in the first line of a Texinfo file to cause TeX to make use of the 'texinfo' macro definitions file.  The '\\' in '\\input' is used instead of an '@' because TeX does not recognize '@' until after it has read the definitions file.",
    documentation = "info:texinfo#Texinfo File Header"
  },

  insertcopying = {
    summary = "Insert the text previously defined with the '@copying' environment.",
    documentation = "info:texinfo#@insertcopying"
  },

  item = {
    summary = "Indicate the beginning of a marked paragraph for '@itemize' and '@enumerate'; indicate the beginning of the text of a first column entry for '@table', '@ftable', and '@vtable'.",
    documentation = "info:texinfo#Lists and Tables"
  },

  itemx = {
    summary = "Like '@item' but do not generate extra vertical space above the item text.  Thus, when several items have the same description, use '@item' for the first and '@itemx' for the others.",
    documentation = "info:texinfo#@itemx"
  },

  kbd = {
    arguments = {
      {meta = "KEYBOARD-CHARACTERS"}
    },
    summary = "Indicate characters of input to be typed by users.",
    documentation = "info:texinfo#@kbd"
  },

  kbdinputstyle = {
    arguments = {
      {meta = "STYLE", delimiters = {"", "\n"}}
    },
    summary = "Specify when '@kbd' should use a font distinct from '@code' according to STYLE: 'code', 'distinct', 'example'.",
    documentation = "info:texinfo#@kbd"
  },

  key = {
    arguments = {
      {meta = "KEY-NAME"}
    },
    summary = "Indicate the name of a key on a keyboard.",
    documentation = "info:texinfo#@key"
  },

  kindex = {
    arguments = {
      {meta = "ENTRY", delimiters = {"", "\n"}}
    },
    summary = "Add ENTRY to the index of keys.",
    documentation = "info:texinfo#Index Entries"
  },

  L = {
    arguments = {{meta = ""}},
    summary = "Generate the uppercase and lowercase Polish suppressed-L letters, respectively: Ł, ł."
  },

  l = {
    arguments = {{meta = ""}},
    summary = "Generate the uppercase and lowercase Polish suppressed-L letters, respectively: Ł, ł."
  },

  LaTeX = {
    arguments = {{meta = ""}},
    summary = "Generate the LaTeX logo.",
    documentation = "info:texinfo#@TeX @LaTeX"
  },

  leq = {
    arguments = {{meta = ""}},
    summary = "Generate a less-than-or-equal sign, '≤'.",
    documentation = "info:texinfo#@geq @leq"
  },

  listoffloats = {
    summary = "Produce a table-of-contents-like listing of '@float's.",
    documentation = "info:texinfo#@listoffloats"
  },

  lowersections = {
    summary = "Change subsequent chapters to sections, sections to subsections, and so on.",
    documentation = "info:texinfo#Raise/lower sections"
  },

  majorheading = {
    arguments = {
      {meta = "TITLE", delimiters = {"", "\n"}}
    },
    summary = "Print an unnumbered chapter-like heading, but omit from the table of contents.  This generates more vertical whitespace before the heading than the '@chapheading' command.",
    documentation = "info:texinfo#@majorheading @chapheading"
  },

  math = {
    arguments = {
      {meta = "MATHEMATICAL-EXPRESSION"}
    },
    summary = "Format a mathematical expression.",
    documentation = "info:texinfo#Inserting Math"
  },

  minus = {
    arguments = {{meta = ""}},
    summary = "Generate a minus sign, '-'.",
    documentation = "info:texinfo#@minus"
  },

  need = {
    arguments = {
      {meta = "N", delimiters = {"", "\n"}}
    },
    summary = "Start a new page in a printed manual if fewer than N mils (thousandths of an inch) remain on the current page.",
    documentation = "info:texinfo#@need"
  },

  node = {
    arguments = {
      {meta = "NAME,", delimiters = {"", " "}},
      {meta = "NEXT, PREVIOUS, UP", delimiters = {"", "\n"}}
    },
    summary = "Begin a new node.",
    documentation = "info:texinfo#Writing a Node"
  },

  noindent = {
    summary = "Prevent text from being indented as if it were a new paragraph.",
    documentation = "info:texinfo#@noindent"
  },

  novalidate = {
    summary = "Suppress validation of node references and omit creation of auxiliary files with TeX.  Use before any sectioning or cross-reference commands.",
    documentation = "info:texinfo#Pointer Validation"
  },

  O = {
    arguments = {{meta = ""}},
    summary = "Generate the uppercase and lowercase O-with-slash letters, respectively: Ø, ø."
  },

  o = {
    arguments = {{meta = ""}},
    summary = "Generate the uppercase and lowercase O-with-slash letters, respectively: Ø, ø."
  },

  oddfooting = {
    arguments = {
      {meta = "LEFT", delimiters = {"", "@|"}},
      {meta = "CENTER", delimiters = {"", "@|"}},
      {meta = "RIGHT", delimiters = {"", "\n"}}
    },
    summary = "Specify page footings resp. headings for odd-numbered (right-hand) pages.",
    documentation = "info:texinfo#Custom Headings"
  },

  oddheading = {
    arguments = {
      {meta = "LEFT", delimiters = {"", "@|"}},
      {meta = "CENTER", delimiters = {"", "@|"}},
      {meta = "RIGHT", delimiters = {"", "\n"}}
    },
    summary = "Specify page footings resp. headings for odd-numbered (right-hand) pages.",
    documentation = "info:texinfo#Custom Headings"
  },

  OE = {
    arguments = {{meta = ""}},
    summary = "Generate the uppercase and lowercase OE ligatures, respectively: Œ, œ.",
    documentation = "info:texinfo#Inserting Accents"
  },

  oe = {
    arguments = {{meta = ""}},
    summary = "Generate the uppercase and lowercase OE ligatures, respectively: Œ, œ.",
    documentation = "info:texinfo#Inserting Accents"
  },

  ogonek = {
    arguments = {
      {meta = "C"}
    },
    summary = "Generate an ogonek diacritic under the next character, as in ą.",
    documentation = "info:texinfo#Inserting Accents"
  },

  option = {
    arguments = {
      {meta = "OPTION-NAME"}
    },
    summary = "Indicate a command-line option, such as '-l' or '--help'.",
    documentation = "info:texinfo#@option"
  },

  ordf = {
    arguments = {{meta = ""}},
    summary = "Generate the feminine and masculine Spanish ordinals, respectively: ª, º.",
    documentation = "info:texinfo#Inserting Accents"
  },

  ordm = {
    arguments = {{meta = ""}},
    summary = "Generate the feminine and masculine Spanish ordinals, respectively: ª, º.",
    documentation = "info:texinfo#Inserting Accents"
  },

  page = {
    summary = "Start a new page in a printed manual.  No effect in Info.",
    documentation = "info:texinfo#@page"
  },

  pagesizes = {
    arguments = {
      {meta = "[WIDTH][,", delimiters = {"", " "}},
      {meta = "HEIGHT]", delimiters = {"", "\n"}}
    },
    summary = "Change page dimensions.",
    documentation = "info:texinfo#pagesizes"
  },

  paragraphindent = {
    arguments = {
      {meta = "INDENT", delimiters = {"", "\n"}}
    },
    summary = "Indent paragraphs by INDENT number of spaces (perhaps 0); preserve source file indentation if INDENT is 'asis'.",
    documentation = "info:texinfo#@paragraphindent"
  },

  part = {
    arguments = {
      {meta = "TITLE", delimiters = {"", "\n"}}
    },
    summary = "Begin a group of chapters or appendixes; included in the tables of contents and produces a page of its own in printed output.",
    documentation = "info:texinfo#@part"
  },

  pindex = {
    arguments = {
      {meta = "ENTRY", delimiters = {"", "\n"}}
    },
    summary = "Add ENTRY to the index of programs.",
    documentation = "info:texinfo#Index Entries"
  },

  point = {
    arguments = {{meta = ""}},
    summary = "Indicate the position of point in a buffer to the reader with a glyph: '-!-'.",
    documentation = "info:texinfo#@point"
  },

  pounds = {
    arguments = {{meta = ""}},
    summary = "Generate the pounds sterling currency sign.",
    documentation = "info:texinfo#@pounds"
  },

  print = {
    arguments = {{meta = ""}},
    summary = "Indicate printed output to the reader with a glyph: '-|'.",
    documentation = "info:texinfo#@print"
  },

  printindex = {
    arguments = {
      {meta = "INDEX-NAME", delimiters = {"", "\n"}}
    },
    summary = "Generate the alphabetized index for INDEX-NAME (using two columns in a printed manual).",
    documentation = "info:texinfo#Printing Indices & Menus"
  },

  pxref = {
    arguments = {
      {meta = "NODE, [ENTRY], [NODE-TITLE], [INFO-FILE], [MANUAL]"}
    },
    summary = "Make a reference that starts with a lowercase 'see' in a printed manual.  Use within parentheses only.  Only the first argument is mandatory.",
    documentation = "info:texinfo#@pxref"
  },

  questiondown = {
    arguments = {{meta = ""}},
    summary = "Generate an upside-down question mark.",
    documentation = "info:texinfo#Inserting Accents"
  },

  quotedblleft = {
    arguments = {{meta = ""}},
    summary = "Produce various quotation marks: “ ” ‘ ’ „ ‚.",
    documentation = "info:texinfo#Inserting Quotation Marks"
  },

  quotedblright = {
    arguments = {{meta = ""}},
    summary = "Produce various quotation marks: “ ” ‘ ’ „ ‚.",
    documentation = "info:texinfo#Inserting Quotation Marks"
  },

  quoteleft = {
    arguments = {{meta = ""}},
    summary = "Produce various quotation marks: “ ” ‘ ’ „ ‚.",
    documentation = "info:texinfo#Inserting Quotation Marks"
  },

  quoteright = {
    arguments = {{meta = ""}},
    summary = "Produce various quotation marks: “ ” ‘ ’ „ ‚.",
    documentation = "info:texinfo#Inserting Quotation Marks"
  },

  quotedblbase = {
    arguments = {{meta = ""}},
    summary = "Produce various quotation marks: “ ” ‘ ’ „ ‚.",
    documentation = "info:texinfo#Inserting Quotation Marks"
  },

  quotesinglbase = {
    arguments = {{meta = ""}},
    summary = "Produce various quotation marks: “ ” ‘ ’ „ ‚.",
    documentation = "info:texinfo#Inserting Quotation Marks"
  },

  r = {
    arguments = {
      {meta = "TEXT"}
    },
    summary = "Set TEXT in the regular roman font.  No effect in Info.",
    documentation = "info:texinfo#Fonts"
  },

  raisesections = {
    summary = "Change subsequent sections to chapters, subsections to sections, and so on.",
    documentation = "info:texinfo#Raise/lower sections"
  },

  ref = {
    arguments = {
      {meta = "NODE, [ENTRY], [NODE-TITLE], [INFO-FILE], [MANUAL]"}
    },
    summary = "Make a plain reference that does not start with any special text.  Follow command with a punctuation mark.  Only the first argument is mandatory.",
    documentation = "info:texinfo#@ref"
  },

  refill = {
    summary = "This command used to refill and indent the paragraph after all the other processing has been done.  It is no longer needed, since all formatters now automatically refill as needed, but you may still see it in the source to some manuals, as it does no harm."
  },

  registeredsymbol = {
    arguments = {{meta = ""}},
    summary = "Generate the legal symbol (R).",
    documentation = "info:texinfo#@registeredsymbol"
  },

  result = {
    arguments = {{meta = ""}},
    summary = "Indicate the result of an expression to the reader with a special glyph: '=>'.",
    documentation = "info:texinfo#@result"
  },

  ringaccent = {
    arguments = {
      {meta = "C"}
    },
    summary = "Generate a ring accent over the next character, as in o̊.",
    documentation = "info:texinfo#Inserting Accents"
  },

  samp = {
    arguments = {
      {meta = "TEXT"}
    },
    summary = "Indicate a literal example of a sequence of characters, in general.  Quoted in Info output.",
    documentation = "info:texinfo#@samp"
  },

  sansserif = {
    arguments = {
      {meta = "TEXT"}
    },
    summary = "Set TEXT in a sans serif font if possible.  No effect in Info.",
    documentation = "info:texinfo#Fonts"
  },

  sc = {
    arguments = {
      {meta = "TEXT"}
    },
    summary = "Set TEXT in a small caps font in printed output, and uppercase in Info.",
    documentation = "info:texinfo#Smallcaps"
  },

  section = {
    arguments = {
      {meta = "TITLE", delimiters = {"", "\n"}}
    },
    summary = "Begin a section within a chapter.  The section title appears in the table of contents.  In Info, the title is underlined with equal signs.  Within '@chapter' and '@appendix', the section title is numbered; within '@unnumbered', the section is unnumbered.",
    documentation = "info:texinfo#@section"
  },

  set = {
    arguments = {
      {meta = "TXIVAR", delimiters = {"", " "}},
      {meta = "[STRING]", delimiters = {"", "\n"}}
    },
    summary = "Define the Texinfo variable TXIVAR, optionally to the value STRING.",
    documentation = "info:texinfo#@set @clear @value"
  },

  setchapternewpage = {
    arguments = {
      {meta = "ON-OFF-ODD", delimiters = {"", "\n"}}
    },
    summary = "Specify whether chapters start on new pages, and if so, whether on odd-numbered (right-hand) new pages.",
    documentation = "info:texinfo#@setchapternewpage"
  },

  setfilename = {
    arguments = {
      {meta = "INFO-FILE-NAME", delimiters = {"", "\n"}}
    },
    summary = "Provide a name to be used for the output files.  This command is ignored for TeX formatting.",
    documentation = "info:texinfo#@setfilename"
  },

  settitle = {
    arguments = {
      {meta = "TITLE", delimiters = {"", "\n"}}
    },
    summary = "Specify the title for page headers in a printed manual, and the default document title for HTML '<head>'.",
    documentation = "info:texinfo#@settitle"
  },

  shortcaption = {
    summary = "Define the short caption for a '@float'.",
    documentation = "info:texinfo#@caption @shortcaption"
  },

  shortcontents = {
    summary = "Print a short table of contents, with chapter-level entries only.  Not relevant to Info, which uses menus rather than tables of contents.",
    documentation = "info:texinfo#Contents"
  },

  shorttitlepage = {
    arguments = {
      {meta = "TITLE", delimiters = {"", "\n"}}
    },
    summary = "Generate a minimal title page.",
    documentation = "info:texinfo#@titlepage"
  },

  slanted = {
    arguments = {
      {meta = "TEXT"}
    },
    summary = "Set TEXT in a slanted font if possible.  No effect in Info.",
    documentation = "info:texinfo#Fonts"
  },

  smallbook = {
    summary = "Cause TeX to produce a printed manual in a 7 by 9.25 inch format rather than the regular 8.5 by 11 inch format.",
    documentation = "info:texinfo#@smallbook"
  },

  sortas = {
    arguments = {
      {meta = "KEY"}
    },
    summary = "Used in the arguments to index commands to give a string by which the index entry should be sorted.",
    documentation = "info:texinfo#Indexing Commands"
  },

  sp = {
    arguments = {
      {meta = "N", delimiters = {"", "\n"}}
    },
    summary = "Skip N blank lines.",
    documentation = "info:texinfo#@sp"
  },

  ss = {
    arguments = {{meta = ""}},
    summary = "Generate the German sharp-S es-zet letter, ß.",
    documentation = "info:texinfo#Inserting Accents"
  },

  strong = {
    arguments = {
      {meta = "TEXT"},
    },
    summary = "Emphasize TEXT more strongly than '@emph', by using *boldface* where possible; enclosed in asterisks in Info.",
    documentation = "info:texinfo#emph & strong"
  },

  sub = {
    arguments = {
      {meta = "TEXT"},
    },
    summary = "Set TEXT as a subscript.",
    documentation = "info:texinfo#Inserting Subscripts and Superscripts"
  },

  subheading = {
    arguments = {
      {meta = "TITLE", delimiters = {"", "\n"}}
    },
    summary = "Print an unnumbered subsection-like heading, but omit from the table of contents of a printed manual.  In Info, the title is underlined with hyphens.",
    documentation = "info:texinfo#@unnumberedsubsec @appendixsubsec @subheading"
  },

  subsection = {
    arguments = {
      {meta = "TITLE", delimiters = {"", "\n"}}
    },
    summary = "Begin a subsection within a section.  The subsection title appears in the table of contents.  In Info, the title is underlined with hyphens.  Same context-dependent numbering as '@section'.",
    documentation = "info:texinfo#@subsection"
  },

  subsubheading = {
    arguments = {
      {meta = "TITLE", delimiters = {"", "\n"}}
    },
    summary = "Print an unnumbered subsubsection-like heading, but omit from the table of contents of a printed manual.  In Info, the title is underlined with periods.",
    documentation = "info:texinfo#@subsubsection"
  },

  subsubsection = {
    arguments = {
      {meta = "TITLE", delimiters = {"", "\n"}}
    },
    summary = "Begin a subsubsection within a subsection.  The subsubsection title appears in the table of contents.  In Info, the title is underlined with periods.  Same context-dependent numbering as '@section'.",
    documentation = "info:texinfo#@subsubsection"
  },

  subtitle = {
    arguments = {
      {meta = "TITLE", delimiters = {"", "\n"}}
    },
    summary = "In a printed manual, set a subtitle in a normal sized font flush to the right-hand side of the page.  Not relevant to Info, which does not have title pages.",
    documentation = "info:texinfo#@title @subtitle @author"
  },

  summarycontents = {
    summary = "Print a short table of contents.  Synonym for '@shortcontents'.",
    documentation = "info:texinfo#Contents"
  },

  sup = {
    arguments = {
      {meta = "TEXT"},
    },
    summary = "Set TEXT as a superscript.",
    documentation = "info:texinfo#Inserting Subscripts and Superscripts"
  },

  syncodeindex = {
    arguments = {
      {meta = "FROM-INDEX", delimiters = {"", " "}},
      {meta = "TO-INDEX", delimiters = {"", "\n"}}
    },
    summary = "Merge the index named in the first argument into the index named in the second argument, formatting the entries from the first index with '@code'.",
    documentation = "info:texinfo#Combining Indices"
  },

  synindex = {
    arguments = {
      {meta = "FROM-INDEX", delimiters = {"", " "}},
      {meta = "TO-INDEX", delimiters = {"", "\n"}}
    },
    summary = "Merge the index named in the first argument into the index named in the second argument.  Do not change the font of FROM-INDEX entries.",
    documentation = "info:texinfo#Combining Indices"
  },

  t = {
    arguments = {
      {meta = "TEXT"}
    },
    summary = "Set TEXT in a fixed-width, typewriter-like font.  No effect in Info.",
    documentation = "info:texinfo#Fonts"
  },

  tab = {
    summary = "Separate columns in a row of a multitable.",
    documentation = "info:texinfo#Multitable Rows"
  },

  TeX = {
    arguments = {{meta = ""}},
    summary = "Generate the TeX logo.",
    documentation = "info:texinfo#@TeX @LaTeX"
  },

  textdegree = {
    arguments = {{meta = ""}},
    summary = "Generate the degree symbol.",
    documentation = "info:texinfo#@textdegree"
  },

  thischapter = {
    summary = "Only allowed in a heading or footing.  Stands for, respectively, the number and name of the current chapter (in the format 'Chapter 1: Title'), the current chapter name only, the current chapter number only, the filename, the current page number, and the title of the document, respectively.",
    documentation = "info:texinfo#Custom Headings"
  },

  thischaptername = {
    summary = "Only allowed in a heading or footing.  Stands for, respectively, the number and name of the current chapter (in the format 'Chapter 1: Title'), the current chapter name only, the current chapter number only, the filename, the current page number, and the title of the document, respectively.",
    documentation = "info:texinfo#Custom Headings"
  },

  thischapternum = {
    summary = "Only allowed in a heading or footing.  Stands for, respectively, the number and name of the current chapter (in the format 'Chapter 1: Title'), the current chapter name only, the current chapter number only, the filename, the current page number, and the title of the document, respectively.",
    documentation = "info:texinfo#Custom Headings"
  },

  thisfile = {
    summary = "Only allowed in a heading or footing.  Stands for, respectively, the number and name of the current chapter (in the format 'Chapter 1: Title'), the current chapter name only, the current chapter number only, the filename, the current page number, and the title of the document, respectively.",
    documentation = "info:texinfo#Custom Headings"
  },

  thispage = {
    summary = "Only allowed in a heading or footing.  Stands for, respectively, the number and name of the current chapter (in the format 'Chapter 1: Title'), the current chapter name only, the current chapter number only, the filename, the current page number, and the title of the document, respectively.",
    documentation = "info:texinfo#Custom Headings"
  },

  thistitle = {
    summary = "Only allowed in a heading or footing.  Stands for, respectively, the number and name of the current chapter (in the format 'Chapter 1: Title'), the current chapter name only, the current chapter number only, the filename, the current page number, and the title of the document, respectively.",
    documentation = "info:texinfo#Custom Headings"
  },

  TH = {
    arguments = {{meta = ""}},
    summary = "Generate the uppercase and lowercase Icelandic letter thorn, respectively: Þ, þ.",
    documentation = "info:texinfo#Inserting Accents"
  },

  th = {
    arguments = {{meta = ""}},
    summary = "Generate the uppercase and lowercase Icelandic letter thorn, respectively: Þ, þ.",
    documentation = "info:texinfo#Inserting Accents"
  },

  tie = {
    arguments = {{meta = ""}},
    summary = "Generate a normal interword space at which a line break is not allowed.",
    documentation = "info:texinfo#@tie"
  },

  tieaccent = {
    arguments = {
      {meta = "CC"}
    },
    summary = "Generate a tie-after accent over the next two characters CC, as in 'oo͡'.",
    documentation = "info:texinfo#Inserting Accents"
  },

  tindex = {
    arguments = {
      {meta = "ENTRY", delimiters = {"", "\n"}}
    },
    summary = "Add ENTRY to the index of data types.",
    documentation = "info:texinfo#Index Entries"
  },

  title = {
    arguments = {
      {meta = "TITLE", delimiters = {"", "\n"}}
    },
    summary = "In a printed manual, set a title flush to the left-hand side of the page in a larger than normal font and underline it with a black rule.  Not relevant to Info, which does not have title pages.",
    documentation = "info:texinfo#@title @subtitle @author"
  },

  titlefont = {
    arguments = {
      {meta = "TEXT"}
    },
    summary = "In a printed manual, print TEXT in a larger than normal font.",
    documentation = "info:texinfo#@titlefont @center @sp"
  },

  titlepage = {
    summary = "Begin the title page.  Write the command on a line of its own, paired with '@end titlepage'.  Nothing between '@titlepage' and '@end titlepage' appears in Info.",
    documentation = "info:texinfo#@titlepage"
  },

  today = {
    arguments = {{meta = ""}},
    summary = "Insert the current date, in '1 Jan 1900' style.",
    documentation = "info:texinfo#Custom Headings"
  },

  top = {
    arguments = {
      {meta = "TITLE", delimiters = {"", "\n"}}
    },
    summary = "Mark the topmost '@node' in the file, which must be defined on the line immediately preceding the '@top' command.  The title is formatted as a chapter-level heading.  The entire top node, including the '@node' and '@top' lines, are normally enclosed with '@ifnottex ... @end ifnottex'.  In TeX and 'texinfo-format-buffer', the '@top' command is merely a synonym for '@unnumbered'.",
    documentation = "info:texinfo#makeinfo Pointer Creation"
  },

  U = {
    arguments = {
      {meta = "HEX"}
    },
    summary = "Output a representation of Unicode character U+HEX.",
    documentation = "info:texinfo#Inserting Unicode"
  },

  u = {
    arguments = {
      {meta = "C"}
    },
    summary = "Generate a breve, underbar, or underdot accent, respectively, over or under the character C, as in ŏ, o̲, ọ.",
    documentation = "info:texinfo#Inserting Accents"
  },

  ubaraccent = {
    arguments = {
      {meta = "C"}
    },
    summary = "Generate a breve, underbar, or underdot accent, respectively, over or under the character C, as in ŏ, o̲, ọ.",
    documentation = "info:texinfo#Inserting Accents"
  },

  udotaccent = {
    arguments = {
      {meta = "C"}
    },
    summary = "Generate a breve, underbar, or underdot accent, respectively, over or under the character C, as in ŏ, o̲, ọ.",
    documentation = "info:texinfo#Inserting Accents"
  },

  unmacro = {
    arguments = {
      {meta = "MACRONAME", delimiters = {"", "\n"}}
    },
    summary = "Undefine the macro '@MACRONAME' if it has been defined.",
    documentation = "info:texinfo#Defining Macros"
  },

  unnumbered = {
    arguments = {
      {meta = "TITLE", delimiters = {"", "\n"}}
    },
    summary = "Begin a chapter that appears without chapter numbers of any kind.  The title appears in the table of contents.  In Info, the title is underlined with asterisks.",
    documentation = "info:texinfo#@unnumbered @appendix"
  },

  unnumberedsec = {
    arguments = {
      {meta = "TITLE", delimiters = {"", "\n"}}
    },
    summary = "Begin a section that appears without section numbers of any kind.  The title appears in the table of contents of a printed manual.  In Info, the title is underlined with equal signs.",
    documentation = "info:texinfo#@unnumberedsec @appendixsec @heading"
  },

  unnumberedsubsec = {
    arguments = {
      {meta = "TITLE", delimiters = {"", "\n"}}
    },
    summary = "Begin an unnumbered subsection.  The title appears in the table of contents.  In Info, the title is underlined with hyphens.",
    documentation = "info:texinfo#@unnumberedsubsec @appendixsubsec @subheading"
  },

  unnumberedsubsubsec = {
    arguments = {
      {meta = "TITLE", delimiters = {"", "\n"}}
    },
    summary = "Begin an unnumbered subsubsection.  The title appears in the table of contents.  In Info, the title is underlined with periods.",
    documentation = "info:texinfo#@subsubsection"
  },

  uref = {
    arguments = {
      {meta = "URL[, DISPLAYED-TEXT][, REPLACEMENT"}
    },
    summary = "Define a cross-reference to an external uniform resource locator, e.g., for the World Wide Web.",
    documentation = "info:texinfo#@url"
  },

  url = {
    arguments = {
      {meta = "URL[, DISPLAYED-TEXT][, REPLACEMENT"}
    },
    summary = "Define a cross-reference to an external uniform resource locator, e.g., for the World Wide Web.",
    documentation = "info:texinfo#@url"
  },

  urefbreakstyle = {
    arguments = {
      {meta = "STYLE", delimiters = {"", "\n"}}
    },
    summary = "Specify how '@uref'/'@url' should break at special characters: 'after', 'before', 'none'.",
    documentation = "info:texinfo#@url"
  },

  v = {
    arguments = {
      {meta = "C"}
    },
    summary = "Generate check accent over the character C, as in ǒ.",
    documentation = "info:texinfo#Inserting Accents"
  },

  validatemenus = {
    arguments = {
      {meta = "ON-OFF", delimiters = {"", "\n"}}
    },
    summary = "Control whether menus can be automatically generated.",
    documentation = "info:texinfo#Writing a Menu"
  },

  value = {
    arguments = {
      {meta = "TXIVAR"}
    },
    summary = "Insert the value, if any, of the Texinfo variable TXIVAR, previously defined by '@set'.",
    documentation = "info:texinfo#@set @clear @value"
  },

  var = {
    arguments = {
      {meta = "METASYNTACTIC-VARIABLE"}
    },
    summary = "Highlight a metasyntactic variable, which is something that stands for another piece of text.",
    documentation = "info:texinfo#@var"
  },

  verb = {
    arguments = {
      {meta = "LITERAL"}
    },
    summary = "Output LITERAL, delimited by the single character DELIM, exactly as is (in the fixed-width font), including any whitespace or Texinfo special characters.",
    documentation = "info:texinfo#@verb"
  },

  verbatiminclude = {
    arguments = {
      {meta = "FILENAME", delimiters = {"", "\n"}}
    },
    summary = "Output the contents of FILENAME exactly as is (in the fixed-width font).",
    documentation = "info:texinfo#@verbatiminclude"
  },

  vindex = {
    arguments = {
      {meta = "ENTRY", delimiters = {"", "\n"}}
    },
    summary = "Add ENTRY to the index of variables.",
    documentation = "info:texinfo#Index Entries"
  },

  vskip = {
    arguments = {
      {meta = "AMOUNT", delimiters = {"", "\n"}}
    },
    summary = "In a printed manual, insert whitespace so as to push text on the remainder of the page towards the bottom of the page.  Used in formatting the copyright page with the argument '0pt plus 1filll'.  (Note spelling of 'filll'.)  '@vskip' may be used only in contexts ignored for Info.",
    documentation = "info:texinfo#Copyright"
  },

  w = {
    arguments = {
      {meta = "TEXT"}
    },
    summary = "Disallow line breaks within TEXT.",
    documentation = "info:texinfo#@w"
  },

  xref = {
    arguments = {
      {meta = "NODE, [ENTRY], [NODE-TITLE], [INFO-FILE], [MANUAL]"}
    },
    summary = "Make a reference that starts with 'See' in a printed manual.  Follow command with a punctuation mark.  Only the first argument is mandatory.",
    documentation = "info:texinfo#@xref"
  },

  xrefautomaticsectiontitle = {
    arguments = {
      {meta = "ON-OFF", delimiters = {"", "\n"}}
    },
    summary = "By default, use the section title instead of the node name in cross references.",
    documentation = "info:texinfo#Three Arguments"
  },
}

environments = {
  cartouche = {
    summary = "Highlight an example or quotation by drawing a box with rounded corners around it.  Pair with '@end cartouche'.  No effect in Info.",
    documentation = "info:texinfo#@cartouche"
  },

  copying = {
    summary = "Specify copyright holders and copying conditions for the document.  Pair with '@end copying'.",
    documentation = "info:texinfo#@copying"
  },

  direntry = {
    summary = "Begin the Info directory menu entry for this file.  Pair with '@end direntry'.",
    documentation = "info:texinfo#Installing Dir Entries"
  },

  display = {
    summary = "Begin a kind of example.  Like '@example' (indent text, do not fill), but do not select a new font.  Pair with '@end display'.",
    documentation = "info:texinfo#@display"
  },

  docbook = {
    summary = "Enter Docbook completely.  Pair with '@end docbook'.",
    documentation = "info:texinfo#Raw Formatter Commands"
  },

  documentdescription = {
    summary = "Set the document description text, included in the HTML output.  Pair with '@end documentdescription'.",
    documentation = "info:texinfo#@documentdescription"
  },

  enumerate = {
    arguments = {
      {meta = "[NUMBER-OR-LETTER]", delimiters = {"", "\n"}}
    },
    summary = "Begin a numbered list, using '@item' for each entry.  Optionally, start list with NUMBER-OR-LETTER.  Pair with '@end enumerate'.",
    documentation = "info:texinfo#@enumerate"
  },

  example = {
    summary = "Begin an example.  Indent text, do not fill, and select fixed-width font.  Pair with '@end example'.",
    documentation = "info:texinfo#@example"
  },

  float = {
    summary = "Environment to define floating material.  Pair with '@end float'.",
    documentation = "info:texinfo#Floats"
  },

  flushleft = {
    summary = "Do not fill text; left (right) justify every line while leaving the right (left) end ragged.  Leave font as is.  Pair with '@end flushleft' ('@end flushright').",
    documentation = "info:texinfo#@flushleft @flushright"
  },

  flushright = {
    summary = "Do not fill text; left (right) justify every line while leaving the right (left) end ragged.  Leave font as is.  Pair with '@end flushleft' ('@end flushright').",
    documentation = "info:texinfo#@flushleft @flushright"
  },

  format = {
    summary = "Begin a kind of example.  Like '@display', but do not indent.  Pair with '@end format'.",
    documentation = "info:texinfo#@example"
  },

  ftable = {
    arguments = {
      {meta = "FORMATTING-COMMAND", delimiters = {"", "\n"}}
    },
    summary = "Begin a two-column table, using '@item' for each entry.  Automatically enter each of the items in the first column into the index of functions.  Pair with '@end ftable'.  The same as '@table', except for indexing.",
    documentation = "info:texinfo#@ftable @vtable"
  },

  group = {
    summary = "Disallow page breaks within following text.  Pair with '@end group'.  Ignored in Info.",
    documentation = "info:texinfo#@group"
  },

  html = {
    summary = "Enter HTML completely.  Pair with '@end html'.",
    documentation = "info:texinfo#Raw Formatter Commands"
  },

  ifclear = {
    arguments = {
      {meta = "TXIVAR", delimiters = {"", "\n"}}
    },
    summary = "If the Texinfo variable TXIVAR is not set, format the following text.  Pair with '@end ifclear'.",
    documentation = "info:texinfo#@set @clear @value"
  },

  ifdocbook = {
    summary = "Begin text that will appear only in the given output format.  '@ifinfo' output appears in both Info and (for historical compatibility) plain text output.  Pair with '@end ifdocbook' resp.  '@end ifhtml' resp. '@end ifinfo'.",
    documentation = "info:texinfo#Conditionals"
  },

  ifhtml = {
    summary = "Begin text that will appear only in the given output format.  '@ifinfo' output appears in both Info and (for historical compatibility) plain text output.  Pair with '@end ifdocbook' resp.  '@end ifhtml' resp. '@end ifinfo'.",
    documentation = "info:texinfo#Conditionals"
  },

  ifinfo = {
    summary = "Begin text that will appear only in the given output format.  '@ifinfo' output appears in both Info and (for historical compatibility) plain text output.  Pair with '@end ifdocbook' resp.  '@end ifhtml' resp. '@end ifinfo'.",
    documentation = "info:texinfo#Conditionals"
  },

  ifnotinfo = {
    summary = "Begin text to appear in output other than Info and (for historical compatibility) plain text.  Pair with '@end ifnotinfo'.",
    documentation = "info:texinfo#Conditionals"
  },

  ifplaintext = {
    summary = "Begin text that will appear only in the plain text output.  Pair with '@end ifplaintext'.",
    documentation = "info:texinfo#Conditionals"
  },

  ifset = {
    arguments = {
      {meta = "TXIVAR", delimiters = {"", "\n"}}
    },
    summary = "If the Texinfo variable TXIVAR is set, format the following text.  Pair with '@end ifset'.",
    documentation = "info:texinfo#@set @clear @value"
  },

  iftex = {
    summary = "Begin text to appear only in the TeX output.  Pair with '@end iftex'.",
    documentation = "info:texinfo#Conditionals"
  },

  ifxml = {
    summary = "Begin text that will appear only in the XML output.  Pair with '@end ifxml'.",
    documentation = "info:texinfo#Conditionals"
  },

  ignore = {
    summary = "Begin text that will not appear in any output.  Pair with '@end ignore'.",
    documentation = "info:texinfo#Comments"
  },

  indentedblock = {
    summary = "Indent a block of arbitary text on the left.  Pair with '@end indentedblock'.",
    documentation = "info:texinfo#@indentedblock"
  },

  itemize = {
    arguments = {
      {meta = "MARK-GENERATING-CHARACTER-OR-COMMAND", delimiters = {"", "\n"}}
    },
    summary = "Begin an unordered list: indented paragraphs with a mark, such as '@bullet', inside the left margin at the beginning of each item.  Pair with '@end itemize'.",
    documentation = "info:texinfo#@itemize"
  },

  lisp = {
    summary = "Begin an example of Lisp code.  Indent text, do not fill, and select fixed-width font.  Pair with '@end lisp'.",
    documentation = "info:texinfo#@lisp"
  },

  macro = {
    arguments = {
      {meta = "MACRONAME", delimiters = {"", " "}},
      {meta = "{PARAMS}", delimiters = {"", "\n"}}
    },
    summary = "Define a new Texinfo command '@MACRONAME{PARAMS}'.  Pair with '@end macro'.",
    documentation = "info:texinfo#Defining Macros"
  },

  menu = {
    summary = "Mark the beginning of a menu of nodes.  No effect in a printed manual.  Pair with '@end menu'.",
    documentation = "info:texinfo#Menus"
  },

  multitable = {
    arguments = {
      {meta = "COLUMN-WIDTH-SPEC", delimiters = {"", "\n"}}
    },
    summary = "Begin a multi-column table.  Begin each row with '@item' or '@headitem', and separate columns with '@tab'.  Pair with '@end multitable'.",
    documentation = "info:texinfo#Multitable Column Widths"
  },

  quotation = {
    summary = "Narrow the margins to indicate text that is quoted from another work.  Takes optional argument specifying prefix text, e.g., an author name.  Pair with '@end quotation'.",
    documentation = "info:texinfo#@quotation"
  },

  raggedright = {
    summary = "Fill text; left justify every line while leaving the right end ragged.  Leave font as is.  Pair with '@end raggedright'.  No effect in Info.",
    documentation = "info:texinfo#@raggedright"
  },

  smalldisplay = {
    summary = "Begin a kind of example.  Like '@display', but use a smaller font size where possible.  Pair with '@end smalldisplay'.",
    documentation = "info:texinfo#@small..."
  },

  smallexample = {
    summary = "Begin an example.  Like '@example', but use a smaller font size where possible.  Pair with '@end smallexample'.",
    documentation = "info:texinfo#@small..."
  },

  smallformat = {
    summary = "Begin a kind of example.  Like '@format', but use a smaller font size where possible.  Pair with '@end smallformat'.",
    documentation = "info:texinfo#@small..."
  },

  smallindentedblock = {
    summary = "Like '@indentedblock', but use a smaller font size where possible.  Pair with '@end smallindentedblock'.",
    documentation = "info:texinfo#@small..."
  },

  smalllisp = {
    summary = "Begin an example of Lisp code.  Same as '@smallexample'.  Pair with '@end smalllisp'.",
    documentation = "info:texinfo#@small..."
  },

  smallquotation = {
    summary = "Like '@quotation', but use a smaller font size where possible.  Pair with '@end smallquotation'.",
    documentation = "info:texinfo#@small..."
  },

  table = {
    arguments = {
      {meta = "FORMATTING-COMMAND", delimiters = {"", "\n"}}
    },
    summary = "Begin a two-column table (description list), using '@item' for each entry.  Write each first column entry on the same line as '@item'.  First column entries are printed in the font resulting from FORMATTING-COMMAND.  Pair with '@end table'.",
    documentation = "info:texinfo#Making a Two-column Table"
  },

  tex = {
    summary = "Enter TeX completely.  Pair with '@end tex'.",
    documentation = "info:texinfo#Raw Formatter Commands"
  },

  verbatim = {
    summary = "Output the text of the environment exactly as is (in the fixed-width font).  Pair with '@end verbatim'.",
    documentation = "info:texinfo#@verbatim"
  },

  vtable = {
    arguments = {
      {meta = "FORMATTING-COMMAND", delimiters = {"", "\n"}}
    },
    summary = "Begin a two-column table, using '@item' for each entry.  Automatically enter each of the items in the first column into the index of variables.  Pair with '@end vtable'.  The same as '@table', except for indexing.",
    documentation = "info:texinfo#@ftable @vtable"
  },

  xml = {
    summary = "Enter XML completely.  Pair with '@end xml'.",
    documentation = "info:texinfo#Raw Formatter Commands"
  },
}
