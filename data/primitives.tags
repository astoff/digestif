comments = [[
Extracted from “TeX for the Impatient” by Paul W. Abrahams, Kathryn
A. Hargreaves, Karl Berry, and Daniel H. James

URL: https://www.gnu.org/software/teximpatient/
Original license: GNU FDL
]]
ctan_package = "tex"
documentation = {
  {summary = "The TeXbook", uri = "https://www.ctan.org/pkg/texbook"},
  {
    summary = "TeX for the Impatient",
    uri = "texmf:doc/plain/impatient/book.pdf"
  }
}
commands = {
  ["-"] = {
    documentation = "texmf:doc/plain/impatient/book.pdf#page=146",
    summary = "Specify a legal hyphenation point."
  },
  ["/"] = {
    documentation = "texmf:doc/plain/impatient/book.pdf#page=126",
    summary = "Italic correction for the previous character."
  },
  above = {
    arguments = {{delimiters = false, meta = "dimen"}},
    details = "$ref:teximpatient#/data/over",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=220",
    summary = "Produce a fraction with a bar of specified thickness."
  },
  abovedisplayshortskip = {
    details = "$ref:teximpatient#/data/abovedisplayshortskip",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=237",
    summary = "Glue TeX inserts before a display when the previous line fits in the display’s indentation, by default 0pt plus 3pt.",
    type = "glue"
  },
  abovedisplayskip = {
    details = "$ref:teximpatient#/data/abovedisplayskip",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=237",
    summary = "Glue TeX inserts before a display when the previous line doesn’t fit in the display’s indentation, by default 12pt plus 3pt minus 9pt.",
    type = "glue"
  },
  abovewithdelims = {
    arguments = {
      {delimiters = false, meta = "delim1"},
      {delimiters = false, meta = "delim2"},
      {delimiters = false, meta = "dimen"}
    },
    details = "$ref:teximpatient#/data/overwithdelims",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=221",
    summary = "Produce a fraction with a bar of specified thickness and surrounded by specified delimiters."
  },
  accent = {
    arguments = {{delimiters = false, meta = "charcode"}},
    details = "$ref:teximpatient#/data/accent",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=120",
    summary = "Put specified accent over the next character."
  },
  adjdemerits = {
    details = "$ref:teximpatient#/data/adjdemerits",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=145",
    summary = "Additional demerits for a line break which would result in adjacent lines with incompatible word spacing, by default 10000.",
    type = "number"
  },
  advance = {
    arguments = {
      {delimiters = {"", "by"}, meta = "muskip register"},
      {delimiters = false, meta = "muglue"}
    },
    details = "$ref:teximpatient#/data/advance",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=265",
    summary = "Add a number to a \\count register."
  },
  afterassignment = {
    arguments = {{delimiters = false, meta = "token"}},
    details = "$ref:teximpatient#/data/afterassignment",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=249",
    summary = "Wait to expand the following token until the next assignment is done."
  },
  aftergroup = {
    arguments = {{delimiters = false, meta = "token"}},
    details = "$ref:teximpatient#/data/aftergroup",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=249",
    summary = "Wait to expand the following token until the end of the current group."
  },
  atop = {
    details = "$ref:teximpatient#/data/over",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=220",
    summary = "Produce a fraction without a fraction bar."
  },
  atopwithdelims = {
    arguments = {
      {delimiters = false, meta = "delim1"},
      {delimiters = false, meta = "delim2"}
    },
    details = "$ref:teximpatient#/data/overwithdelims",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=221",
    summary = "Produce a fraction without a fraction bar and surrounded by specified delimiters."
  },
  badness = {
    details = "$ref:teximpatient#/data/badness",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=190",
    summary = "The badness of the glue setting in the last box made."
  },
  baselineskip = {
    details = "$ref:teximpatient#/data/baselineskip",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=153",
    summary = "Glue for the normal vertical distance from one baseline to the next, by default 12pt.",
    type = "glue"
  },
  batchmode = {
    details = "$ref:teximpatient#/data/batchmode",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=273",
    summary = "Don’t stop at errors and don’t output to terminal."
  },
  begingroup = {
    details = "$ref:teximpatient#/data/begingroup",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=247",
    summary = "Start a group to be ended by \\endgroup."
  },
  belowdisplayshortskip = {
    details = "$ref:teximpatient#/data/belowdisplayshortskip",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=237",
    summary = "Glue TeX inserts after a display when the previous line fits in the display’s indentation, by default 7pt plus 0.3pt minus 4pt.",
    type = "glue"
  },
  belowdisplayskip = {
    details = "$ref:teximpatient#/data/belowdisplayskip",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=237",
    summary = "Glue TeX inserts after a display when the previous line doesn’t fit in the display’s indentation, by default 12pt plus 3pt minus 9pt.",
    type = "glue"
  },
  binoppenalty = {
    details = "$ref:teximpatient#/data/binoppenalty",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=146",
    summary = "Additional penalty for breaking after a binary math operator, by default 700.",
    type = "number"
  },
  botmark = {
    details = "$ref:teximpatient#/data/firstmark",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=164",
    summary = "The last mark item on the page just boxed."
  },
  box = {
    arguments = {{delimiters = false, meta = "register"}},
    details = "$ref:teximpatient#/data/setbox",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=184",
    summary = "Append the box in a specified box register to the current list, and void the register."
  },
  boxmaxdepth = {
    details = "$ref:teximpatient#/data/boxmaxdepth",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=183",
    summary = "Maximum depth of vboxes, by default \\maxdimen.",
    type = "dimen"
  },
  brokenpenalty = {
    details = "$ref:teximpatient#/data/brokenpenalty",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=159",
    summary = "Penalty for line break at a discretionary item, by default 100.",
    type = "number"
  },
  catcode = {
    arguments = {
      {delimiters = false, meta = "charcode"},
      {delimiters = false, meta = "number"}
    },
    details = "$ref:teximpatient#/data/catcode",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=271",
    summary = "The category code of a specified character."
  },
  char = {
    arguments = {{delimiters = false, meta = "charcode"}},
    details = "$ref:teximpatient#/data/char",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=119",
    summary = "Produce the character from the current font with the specified code."
  },
  chardef = {
    arguments = {
      {delimiters = false, meta = "control sequence"},
      {literal = "=", optional = true},
      {delimiters = false, meta = "charcode"}
    },
    details = "$ref:teximpatient#/data/chardef",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=252",
    summary = "Define a specified control sequence to be a character’s code, a number between 0 and 255."
  },
  cleaders = {
    arguments = {
      {delimiters = false, meta = "box or rule"},
      {delimiters = false, meta = "skip command"}
    },
    details = "$ref:teximpatient#/data/leaders",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=194",
    summary = "Produce leaders with half of leftover space before the first box, and half after the last."
  },
  closein = {
    documentation = "texmf:doc/plain/impatient/book.pdf#page=268",
    summary = "Close a specified input stream."
  },
  closeout = {
    arguments = {{delimiters = false, meta = "number"}},
    details = "$ref:teximpatient#/data/closeout",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=269",
    summary = "Close a specified output stream."
  },
  clubpenalty = {
    details = "$ref:teximpatient#/data/clubpenalty",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=158",
    summary = "Additional penalty for a single line remaining before a page break, by default 150.",
    type = "number"
  },
  copy = {
    arguments = {{delimiters = false, meta = "register"}},
    details = "$ref:teximpatient#/data/copy",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=184",
    summary = "Like \\box, but don’t void the register."
  },
  count = {
    arguments = {{delimiters = false, meta = "register"}},
    details = "$ref:teximpatient#/data/count",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=262",
    summary = "The specified integer register."
  },
  countdef = {
    arguments = {
      {delimiters = false, meta = "control sequence"},
      {literal = "=", optional = true},
      {delimiters = false, meta = "register"}
    },
    details = "$ref:teximpatient#/data/countdef",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=265",
    summary = "Define a specified control sequence to be a number corresponding to a \\count register."
  },
  cr = {
    details = "$ref:teximpatient#/data/cr",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=200",
    summary = "End a row (or column) within an alignment."
  },
  crcr = {
    details = "$ref:teximpatient#/data/crcr",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=200",
    summary = "Does nothing if the last command was \\cr or \\noalign; otherwise, equivalent to \\cr."
  },
  csname = {
    arguments = {{delimiters = {"", "\\endcsname"}, meta = "token list"}},
    details = "$ref:teximpatient#/data/csname",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=253",
    summary = "Start a control sequence name to be ended by \\endcsname."
  },
  day = {
    details = "$ref:teximpatient#/data/day",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=245",
    summary = "Current day of the month, as a number.",
    type = "number"
  },
  deadcycles = {
    details = "$ref:teximpatient#/data/deadcycles",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=168",
    summary = "Number of \\output initiations since the last \\shipout.",
    type = "number"
  },
  def = {
    action = "def",
    arguments = {
      {delimiters = false, meta = "control sequence"},
      {delimiters = {"", "{"}, meta = "parameter text"},
      {delimiters = {"", "}"}, meta = "replacement text"}
    },
    details = "$ref:teximpatient#/data/def",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=250",
    summary = "Define a control sequence to be a macro."
  },
  defaulthyphenchar = {
    details = "$ref:teximpatient#/data/defaulthyphenchar",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=149",
    summary = "Default hyphenation character code.",
    type = "number"
  },
  defaultskewchar = {
    details = "$ref:teximpatient#/data/defaultskewchar",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=233",
    summary = "Default accent skewing character code.",
    type = "number"
  },
  delcode = {
    arguments = {
      {delimiters = false, meta = "charcode"},
      {delimiters = false, meta = "number"}
    },
    details = "$ref:teximpatient#/data/delcode",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=271",
    summary = "The delimiter code of a specified character."
  },
  delimiter = {
    arguments = {{delimiters = false, meta = "number"}},
    details = "$ref:teximpatient#/data/delimiter",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=224",
    summary = "Produce a specified delimiter."
  },
  delimiterfactor = {
    documentation = "texmf:doc/plain/impatient/book.pdf#page=225",
    summary = "1000 times the ratio of the minimum size of a delimiter to the size that would completely cover the formula, by default 901."
  },
  delimitershortfall = {
    documentation = "texmf:doc/plain/impatient/book.pdf#page=225",
    summary = "Minimum difference between formula height and delimiter height, by default 5pt."
  },
  dimen = {
    arguments = {{delimiters = false, meta = "register"}},
    details = "$ref:teximpatient#/data/count",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=262",
    summary = "The specified dimension register."
  },
  dimendef = {
    arguments = {
      {delimiters = false, meta = "control sequence"},
      {literal = "=", optional = true},
      {delimiters = false, meta = "register"}
    },
    details = "$ref:teximpatient#/data/countdef",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=265",
    summary = "Define a specified control sequence to be a number corresponding to a \\dimen register."
  },
  discretionary = {
    arguments = {
      {meta = "pre-break text"},
      {meta = "post-break text"},
      {meta = "no-break text"}
    },
    details = "$ref:teximpatient#/data/discretionary",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=147",
    summary = "Specify three texts, the first two for before and after a line break, the third for no line break."
  },
  displayindent = {
    details = "$ref:teximpatient#/data/displayindent",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=236",
    summary = "TeX sets this to the indentation of a display.",
    type = "dimen"
  },
  displaylimits = {
    details = "$ref:teximpatient#/data/displaylimits",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=215",
    summary = "Place limits above and below operators only in display styles."
  },
  displaystyle = {
    details = "$ref:teximpatient#/data/textstyle",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=218",
    summary = "Use displaystyle size in a formula."
  },
  displaywidowpenalty = {
    details = "$ref:teximpatient#/data/displaywidowpenalty",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=158",
    summary = "Penalty for a single line beginning a page just before a display, by default 50.",
    type = "number"
  },
  displaywidth = {
    details = "$ref:teximpatient#/data/displaywidth",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=236",
    summary = "TeX sets this to the width of a display.",
    type = "dimen"
  },
  divide = {
    arguments = {
      {delimiters = {"", "by"}, meta = "register"},
      {delimiters = false, meta = "number"}
    },
    details = "$ref:teximpatient#/data/multiply",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=266",
    summary = "Divide a specified \\count register by a specified integer."
  },
  doublehyphendemerits = {
    details = "$ref:teximpatient#/data/doublehyphendemerits",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=145",
    summary = "Demerits for two consecutive lines ending with hyphens, by default 10000.",
    type = "number"
  },
  dp = {
    arguments = {{delimiters = false, meta = "register"}},
    details = "$ref:teximpatient#/data/ht",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=187",
    summary = "The depth of the box in a specified box register.",
    type = "dimen"
  },
  dump = {
    details = "$ref:teximpatient#/data/dump",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=283",
    summary = "End the job and produce a format file."
  },
  edef = {
    action = "def",
    arguments = {
      {delimiters = false, meta = "control sequence"},
      {delimiters = {"", "{"}, meta = "parameter text"},
      {delimiters = {"", "}"}, meta = "replacement text"}
    },
    details = "$ref:teximpatient#/data/edef",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=250",
    summary = "Define a control sequence to be a macro, immediately expanding the replacement text."
  },
  ["else"] = {
    details = "$ref:teximpatient#/data/else",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=259",
    summary = "False or default case alternative for a conditional."
  },
  emergencystretch = {
    details = "$ref:teximpatient#/data/emergencystretch",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=144",
    summary = "Additional stretch added to every line if \\tol\\-er\\-ance is not satisfied.",
    type = "dimen"
  },
  ["end"] = {
    details = "$ref:teximpatient#/data/end",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=267",
    summary = "\\output the last page and end the job."
  },
  endcsname = {summary = "End a control sequence name started by \\csname."},
  endgroup = {
    details = "$ref:teximpatient#/data/begingroup",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=247",
    summary = "End a group started by \\begingroup."
  },
  endinput = {
    details = "$ref:teximpatient#/data/endinput",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=267",
    summary = "Terminate input from the current file."
  },
  endlinechar = {
    details = "$ref:teximpatient#/data/endlinechar",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=272",
    summary = "Character TeX inserts at the end of each input line, by default \\twocarets M.",
    type = "number"
  },
  eqno = {
    details = "$ref:teximpatient#/data/eqno",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=227",
    summary = "Put a specified equation number on the right of a display."
  },
  errhelp = {
    details = "$ref:teximpatient#/data/errhelp",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=282",
    summary = "Token list whose expansion TeX displays when the user asks for help in response to an \\errmessage.",
    type = "token list"
  },
  errmessage = {
    arguments = {{meta = "token list"}},
    details = "$ref:teximpatient#/data/message",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=281",
    summary = "Give specified error message."
  },
  errorcontextlines = {
    details = "$ref:teximpatient#/data/errorcontextlines",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=283",
    summary = "The number of lines of context TeX displays at an error, by default 5.",
    type = "number"
  },
  errorstopmode = {
    details = "$ref:teximpatient#/data/errorstopmode",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=272",
    summary = "Stop for interaction at error messages."
  },
  escapechar = {
    details = "$ref:teximpatient#/data/escapechar",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=246",
    summary = "Character with which TeX precedes control sequence names that are displayed.",
    type = "number"
  },
  everycr = {
    details = "$ref:teximpatient#/data/everycr",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=205",
    summary = "Token list TeX expands after a \\cr, or a \\crcr not following \\cr or \\noalign.",
    type = "token list"
  },
  everydisplay = {
    details = "$ref:teximpatient#/data/everymath",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=238",
    summary = "Token list TeX expands when a math display begins.",
    type = "token list"
  },
  everyhbox = {
    details = "$ref:teximpatient#/data/everyhbox",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=184",
    summary = "Token list TeX expands when an hbox begins.",
    type = "token list"
  },
  everyjob = {
    details = "$ref:teximpatient#/data/everyjob",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=283",
    summary = "Token list TeX expands when a job begins.",
    type = "token list"
  },
  everymath = {
    details = "$ref:teximpatient#/data/everymath",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=238",
    summary = "Token list TeX expands when text math mode begins.",
    type = "token list"
  },
  everypar = {
    details = "$ref:teximpatient#/data/everypar",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=133",
    summary = "Token list TeX expands when a paragraph begins.",
    type = "token list"
  },
  everyvbox = {
    details = "$ref:teximpatient#/data/everyhbox",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=184",
    summary = "Token list TeX expands when a vbox begins.",
    type = "token list"
  },
  exhyphenpenalty = {
    details = "$ref:teximpatient#/data/exhyphenpenalty",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=145",
    summary = "Additional penalty for a line break after an explicit hyphen, by default 50.",
    type = "number"
  },
  expandafter = {
    arguments = {
      {delimiters = false, meta = "token1"},
      {delimiters = false, meta = "token2"}
    },
    details = "$ref:teximpatient#/data/expandafter",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=253",
    summary = "Expand the next token only after expanding the token following it."
  },
  fam = {
    details = "$ref:teximpatient#/data/fam",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=230",
    summary = "Font family TeX uses for characters with class seven (i.e., variables) in math.",
    type = "number"
  },
  fi = {
    details = "$ref:teximpatient#/data/fi",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=260",
    summary = "End a conditional."
  },
  finalhyphendemerits = {
    details = "$ref:teximpatient#/data/finalhyphendemerits",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=146",
    summary = "Penalty for the second to last line breaking at a hyphen, by default 5000.",
    type = "number"
  },
  firstmark = {
    details = "$ref:teximpatient#/data/firstmark",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=164",
    summary = "First mark item on the page just boxed."
  },
  floatingpenalty = {
    details = "$ref:teximpatient#/data/floatingpenalty",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=159",
    summary = "Penalty for insertions that are split across pages, by default 0.",
    type = "number"
  },
  font = {
    arguments = {
      {delimiters = false, meta = "control sequence"},
      {literal = "=", optional = true},
      {delimiters = {"", "at"}, meta = "fontname"},
      {delimiters = false, meta = "dimen"}
    },
    details = "$ref:teximpatient#/data/font",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=241",
    summary = "Define a specified control sequence to select a font."
  },
  fontdimen = {
    arguments = {
      {delimiters = false, meta = "number"},
      {delimiters = false, meta = "font"}
    },
    details = "$ref:teximpatient#/data/fontdimen",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=242",
    summary = "A specified parameter of a specified font.",
    type = "dimen"
  },
  fontname = {
    arguments = {{delimiters = false, meta = "font"}},
    details = "$ref:teximpatient#/data/fontname",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=247",
    summary = "Produce the filename of a specified font as characters."
  },
  futurelet = {
    arguments = {
      {delimiters = false, meta = "control sequence"},
      {delimiters = false, meta = "token1"},
      {delimiters = false, meta = "token2"}
    },
    details = "$ref:teximpatient#/data/futurelet",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=252",
    summary = "Assign the third following token to a specified control sequence, then expand the second following token."
  },
  gdef = {
    action = "def",
    arguments = {
      {delimiters = false, meta = "control sequence"},
      {delimiters = {"", "{"}, meta = "parameter text"},
      {delimiters = {"", "}"}, meta = "replacement text"}
    },
    details = "$ref:teximpatient#/data/gdef",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=251",
    summary = "Equivalent to \\global\\def, i.e., globally define a macro."
  },
  global = {
    details = "$ref:teximpatient#/data/global",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=248",
    summary = "Make the following definition global."
  },
  globaldefs = {
    details = "$ref:teximpatient#/data/globaldefs",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=248",
    summary = "Overrides \\global prefixes on assignments.",
    type = "number"
  },
  halign = {
    arguments = {
      {delimiters = {"to", ""}, meta = "dimen", optional = true},
      {delimiters = {"spread", ""}, meta = "dimen", optional = true},
      {delimiters = {"{", "}"}, meta = "rows"}
    },
    details = "$ref:teximpatient#/data/halign",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=198",
    summary = "Align text in columns."
  },
  hangafter = {
    details = "$ref:teximpatient#/data/hangafter",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=137",
    summary = "Starting line number for hanging indentation.",
    type = "number"
  },
  hangindent = {
    details = "$ref:teximpatient#/data/hangafter",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=137",
    summary = "Space for hanging indentation.",
    type = "dimen"
  },
  hbadness = {
    details = "$ref:teximpatient#/data/hbadness",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=190",
    summary = "Badness threshold for reporting underfull or overfull hboxes, by default 1000.",
    type = "number"
  },
  hbox = {
    arguments = {
      {delimiters = {"to", ""}, meta = "dimen", optional = true},
      {delimiters = {"spread", ""}, meta = "dimen", optional = true},
      {delimiters = {"{", "}"}, meta = "horizontal mode material"}
    },
    details = "$ref:teximpatient#/data/hbox",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=180",
    summary = "Produce a specified hbox."
  },
  hfil = {
    details = "$ref:teximpatient#/data/hfil",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=177",
    summary = "Produce infinitely stretchable horizontal glue."
  },
  hfill = {
    details = "$ref:teximpatient#/data/hfil",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=177",
    summary = "Produce horizontal glue even more infinitely stretchable than that produced by \\hfil."
  },
  hfilneg = {
    details = "$ref:teximpatient#/data/hfilneg",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=179",
    summary = "Produce infinitely negative stretchable horizontal glue."
  },
  hfuzz = {
    details = "$ref:teximpatient#/data/hfuzz",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=191",
    summary = "Space threshold for reporting overfull hboxes, by default 0.1pt.",
    type = "dimen"
  },
  hoffset = {
    details = "$ref:teximpatient#/data/hoffset",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=160",
    summary = "Page offset relative to one inch from the paper’s left edge.",
    type = "dimen"
  },
  holdinginserts = {
    details = "$ref:teximpatient#/data/holdinginserts",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=169",
    summary = "If positive, do not remove insertions from the current page.",
    type = "number"
  },
  hrule = {
    arguments = {
      {delimiters = {"width", ""}, meta = "dimen", optional = true},
      {delimiters = {"height", ""}, meta = "dimen", optional = true},
      {delimiters = {"depth", ""}, meta = "dimen", optional = true}
    },
    details = "$ref:teximpatient#/data/hrule",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=192",
    summary = "Produce a horizontal rule; legal only in vertical modes."
  },
  hsize = {
    details = "$ref:teximpatient#/data/hsize",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=160",
    summary = "Line length, by default 6.5in.",
    type = "dimen"
  },
  hskip = {
    arguments = {
      {delimiters = {"", "plus"}, meta = "dimen1"},
      {delimiters = {"", "minus"}, meta = "dimen2"},
      {delimiters = false, meta = "dimen3"}
    },
    details = "$ref:teximpatient#/data/hskip",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=175",
    summary = "Produce specified horizontal glue."
  },
  hss = {
    details = "$ref:teximpatient#/data/hss",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=178",
    summary = "Produce horizontal glue that is infinitely stretchable and infinitely shrinkable."
  },
  ht = {
    arguments = {{delimiters = false, meta = "register"}},
    details = "$ref:teximpatient#/data/ht",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=187",
    summary = "The height of the box in a specified box register.",
    type = "dimen"
  },
  hyphenation = {
    documentation = "texmf:doc/plain/impatient/book.pdf#page=147",
    summary = "Add specified words to the hyphenation exception dictionary."
  },
  hyphenchar = {
    arguments = {{delimiters = false, meta = "font"}},
    details = "$ref:teximpatient#/data/hyphenchar",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=149",
    summary = "The hyphenation character in a specified font.",
    type = "number"
  },
  hyphenpenalty = {
    details = "$ref:teximpatient#/data/hyphenpenalty",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=145",
    summary = "Additional penalty for a line break at a hyphen, by default 50.",
    type = "number"
  },
  ["if"] = {
    arguments = {
      {delimiters = false, meta = "token1"},
      {delimiters = false, meta = "token2"}
    },
    details = "$ref:teximpatient#/data/if",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=255",
    summary = "Test if two specified tokens have the same character code."
  },
  ifcase = {
    documentation = "texmf:doc/plain/impatient/book.pdf#page=259",
    summary = "Expand case n for specified value n."
  },
  ifcat = {
    arguments = {
      {delimiters = false, meta = "token1"},
      {delimiters = false, meta = "token2"}
    },
    details = "$ref:teximpatient#/data/ifcat",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=255",
    summary = "Test if two specified tokens have the same category code."
  },
  ifdim = {
    arguments = {
      {delimiters = false, meta = "dimen1"},
      {delimiters = false, meta = "relation"},
      {delimiters = false, meta = "dimen2"}
    },
    details = "$ref:teximpatient#/data/ifdim",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=257",
    summary = "Test for a specified relationship between two specified dimensions."
  },
  ifeof = {
    arguments = {{delimiters = false, meta = "number"}},
    details = "$ref:teximpatient#/data/ifeof",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=259",
    summary = "Test for being at the end of a specified file."
  },
  iffalse = {
    details = "$ref:teximpatient#/data/iftrue",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=259",
    summary = "Test that is always false."
  },
  ifhbox = {
    arguments = {{delimiters = false, meta = "register"}},
    details = "$ref:teximpatient#/data/ifhbox",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=258",
    summary = "Test if a specified box register contains an hbox."
  },
  ifhmode = {
    details = "$ref:teximpatient#/data/ifhmode",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=258",
    summary = "Test if TeX is in a horizontal mode."
  },
  ifinner = {
    details = "$ref:teximpatient#/data/ifhmode",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=258",
    summary = "Test if TeX is in an internal mode."
  },
  ifmmode = {
    details = "$ref:teximpatient#/data/ifhmode",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=258",
    summary = "Test if TeX is in a math mode."
  },
  ifnum = {
    arguments = {
      {delimiters = false, meta = "number1"},
      {delimiters = false, meta = "relation"},
      {delimiters = false, meta = "number2"}
    },
    details = "$ref:teximpatient#/data/ifnum",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=257",
    summary = "Test for a specified relationship between two specified numbers."
  },
  ifodd = {
    arguments = {{delimiters = false, meta = "number"}},
    details = "$ref:teximpatient#/data/ifodd",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=257",
    summary = "Test if a specified number is odd."
  },
  iftrue = {
    details = "$ref:teximpatient#/data/iftrue",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=259",
    summary = "Test that is always true."
  },
  ifvbox = {
    arguments = {{delimiters = false, meta = "register"}},
    details = "$ref:teximpatient#/data/ifhbox",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=258",
    summary = "Test if a specified box register contains a vbox."
  },
  ifvmode = {
    details = "$ref:teximpatient#/data/ifhmode",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=258",
    summary = "Test if TeX is in a vertical mode."
  },
  ifvoid = {
    arguments = {{delimiters = false, meta = "register"}},
    details = "$ref:teximpatient#/data/ifhbox",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=258",
    summary = "Test if a specified box register is void."
  },
  ifx = {
    arguments = {
      {delimiters = false, meta = "token1"},
      {delimiters = false, meta = "token2"}
    },
    details = "$ref:teximpatient#/data/ifx",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=256",
    summary = "Test if two tokens are the same, or if two macros have the same top-level definition."
  },
  ignorespaces = {
    details = "$ref:teximpatient#/data/ignorespaces",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=272",
    summary = "Ignore any following space tokens."
  },
  immediate = {
    details = "$ref:teximpatient#/data/immediate",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=270",
    summary = "Perform the specified file operation without delay."
  },
  indent = {
    details = "$ref:teximpatient#/data/indent",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=131",
    summary = "Produce an empty box of width \\parindent and enter horizontal mode."
  },
  input = {
    arguments = {{delimiters = false, meta = "filename"}},
    details = "$ref:teximpatient#/data/input",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=267",
    summary = "Begin to read from a specified file."
  },
  inputlineno = {
    details = "$ref:teximpatient#/data/inputlineno",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=267",
    summary = "The current line number of the current input file."
  },
  insert = {
    arguments = {
      {delimiters = false, meta = "number"},
      {meta = "vertical mode material"}
    },
    details = "$ref:teximpatient#/data/insert",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=167",
    summary = "Produce an insertion of a specified class."
  },
  insertpenalties = {
    details = "$ref:teximpatient#/data/insertpenalties",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=159",
    summary = "Sum of penalties due to insertions.",
    type = "number"
  },
  interlinepenalty = {
    details = "$ref:teximpatient#/data/interlinepenalty",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=158",
    summary = "Additional penalty for a page break between lines of a paragraph, by default 0.",
    type = "number"
  },
  jobname = {
    details = "$ref:teximpatient#/data/jobname",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=245",
    summary = "Base name of the file with which TeX was invoked."
  },
  kern = {
    arguments = {{delimiters = false, meta = "dimen"}},
    details = "$ref:teximpatient#/data/kern",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=177",
    summary = "Produce a specified amount of space at which a break is not allowed."
  },
  language = {
    details = "$ref:teximpatient#/data/language",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=148",
    summary = "The current set of hyphenation patterns.",
    type = "number"
  },
  lastbox = {
    details = "$ref:teximpatient#/data/lastkern",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=191",
    summary = "Retrieve and remove the last item from the current list, if it’s a box."
  },
  lastkern = {
    details = "$ref:teximpatient#/data/lastkern",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=191",
    summary = "Retrieve the last item from the current list, if it’s a kern."
  },
  lastpenalty = {
    details = "$ref:teximpatient#/data/lastkern",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=191",
    summary = "Retrieve the last item from the current list, if it’s a penalty."
  },
  lastskip = {
    details = "$ref:teximpatient#/data/lastkern",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=191",
    summary = "Retrieve the last item from the current list, if it’s glue."
  },
  lccode = {
    arguments = {
      {delimiters = false, meta = "charcode"},
      {delimiters = false, meta = "number"}
    },
    details = "$ref:teximpatient#/data/lccode",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=123",
    summary = "The character code for the lowercase form of a letter."
  },
  leaders = {
    arguments = {
      {delimiters = false, meta = "box or rule"},
      {delimiters = false, meta = "skip command"}
    },
    details = "$ref:teximpatient#/data/leaders",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=194",
    summary = "Fill a specified horizontal or vertical space by repeating a specified box or rule."
  },
  left = {
    details = "$ref:teximpatient#/data/left",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=224",
    summary = "Produce the specified delimiter, sizing it to cover the following subformula ended by \\right."
  },
  lefthyphenmin = {
    details = "$ref:teximpatient#/data/lefthyphenmin",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=148",
    summary = "Size of the smallest word fragment TeX allows before a hyphen at the beginning of a word, by default 2.",
    type = "number"
  },
  leftskip = {
    details = "$ref:teximpatient#/data/leftskip",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=135",
    summary = "Glue TeX inserts at the left of each line.",
    type = "glue"
  },
  leqno = {
    details = "$ref:teximpatient#/data/eqno",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=227",
    summary = "Put a specified equation number on the left of a display."
  },
  let = {
    arguments = {
      {delimiters = false, meta = "control sequence"},
      {literal = "=", optional = true},
      {delimiters = false, meta = "token"}
    },
    details = "$ref:teximpatient#/data/let",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=252",
    summary = "Define a control sequence to be the next token."
  },
  limits = {
    details = "$ref:teximpatient#/data/limits",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=215",
    summary = "Place superscript above and subscript below a large operator."
  },
  linepenalty = {
    details = "$ref:teximpatient#/data/linepenalty",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=145",
    summary = "Penalty for line breaking added to each line, by default 10.",
    type = "number"
  },
  lineskip = {
    details = "$ref:teximpatient#/data/baselineskip",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=153",
    summary = "Vertical glue from one baseline to the next if the lines are closer together than \\lineskiplimit, by default 1pt.",
    type = "glue"
  },
  lineskiplimit = {
    details = "$ref:teximpatient#/data/baselineskip",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=153",
    summary = "Threshold for using \\lineskip instead of \\base\\-line\\-skip, by default 0pt.",
    type = "dimen"
  },
  long = {
    details = "$ref:teximpatient#/data/long",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=251",
    summary = "Allow \\par tokens in the argument(s) of the following definition."
  },
  looseness = {
    details = "$ref:teximpatient#/data/looseness",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=144",
    summary = "Difference between the number of lines you want a paragraph to be relative to the optimal number.",
    type = "number"
  },
  lower = {
    arguments = {
      {delimiters = false, meta = "dimen"},
      {delimiters = false, meta = "box"}
    },
    details = "$ref:teximpatient#/data/lower",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=186",
    summary = "Lower a specified box by a specified amount."
  },
  lowercase = {
    arguments = {{meta = "token list"}},
    details = "$ref:teximpatient#/data/lowercase",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=124",
    summary = "Convert uppercase letters in the specified text to lowercase."
  },
  mag = {
    details = "$ref:teximpatient#/data/magnification",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=243",
    summary = "1000 times the ratio for enlarging all dimensions.",
    type = "number"
  },
  mark = {
    arguments = {{meta = "text"}},
    details = "$ref:teximpatient#/data/mark",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=164",
    summary = "Produce a mark item with a specified text."
  },
  mathaccent = {
    arguments = {{delimiters = false, meta = "mathcode"}},
    details = "$ref:teximpatient#/data/mathaccent",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=219",
    summary = "Put specified math accent over the next character."
  },
  mathbin = {
    details = "$ref:teximpatient#/data/mathord",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=238",
    summary = "Space a specified subformula as a binary operator."
  },
  mathchar = {
    arguments = {{delimiters = false, meta = "mathcode"}},
    details = "$ref:teximpatient#/data/mathchar",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=119",
    summary = "Produce the math character with the specified mathcode."
  },
  mathchardef = {
    arguments = {
      {delimiters = false, meta = "control sequence"},
      {literal = "=", optional = true},
      {delimiters = false, meta = "mathcode"}
    },
    details = "$ref:teximpatient#/data/mathchardef",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=252",
    summary = "Define a specified control sequence to be a mathcode, a number between 0 and 215 − 1."
  },
  mathchoice = {
    details = "$ref:teximpatient#/data/mathchoice",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=218",
    summary = "Select one of four specified math subformulas depending on the current style."
  },
  mathclose = {
    details = "$ref:teximpatient#/data/mathord",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=238",
    summary = "Space a specified subformula as a closing delimiter."
  },
  mathcode = {
    arguments = {
      {delimiters = false, meta = "charcode"},
      {delimiters = false, meta = "number"}
    },
    details = "$ref:teximpatient#/data/mathcode",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=271",
    summary = "The mathcode of a specified character."
  },
  mathinner = {
    details = "$ref:teximpatient#/data/mathinner",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=238",
    summary = "Space a specified subformula as an inner formula, e.g., a fraction."
  },
  mathop = {
    details = "$ref:teximpatient#/data/mathord",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=238",
    summary = "Space a specified subformula as a large math operator."
  },
  mathopen = {
    details = "$ref:teximpatient#/data/mathord",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=238",
    summary = "Space a specified subformula as an opening delimiter."
  },
  mathord = {
    details = "$ref:teximpatient#/data/mathord",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=238",
    summary = "Space a specified subformula as an ordinary character."
  },
  mathpunct = {
    details = "$ref:teximpatient#/data/mathord",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=238",
    summary = "Space a specified subformula as punctuation."
  },
  mathrel = {
    details = "$ref:teximpatient#/data/mathord",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=238",
    summary = "Space a specified subformula as a relation."
  },
  mathsurround = {
    details = "$ref:teximpatient#/data/mathsurround",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=237",
    summary = "Space TeX kerns before and after math in text.",
    type = "dimen"
  },
  maxdeadcycles = {
    details = "$ref:teximpatient#/data/maxdeadcycles",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=168",
    summary = "Value of \\deadcycles at which TeX complains, and then uses its own output routine, by default 25.",
    type = "number"
  },
  maxdepth = {
    details = "$ref:teximpatient#/data/maxdepth",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=161",
    summary = "Maximum depth of the bottom box on a page, by default 4pt.",
    type = "dimen"
  },
  meaning = {
    arguments = {{delimiters = false, meta = "token"}},
    details = "$ref:teximpatient#/data/meaning",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=246",
    summary = "Produce the human-understandable meaning of a specified token as characters."
  },
  medmuskip = {
    details = "$ref:teximpatient#/data/thinmuskip",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=234",
    summary = "Glue for a medium math space, by default 4mu plus 2mu minus 4mu.",
    type = "muglue"
  },
  message = {
    arguments = {{meta = "token list"}},
    details = "$ref:teximpatient#/data/message",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=281",
    summary = "Show expansion of the specified text on the terminal."
  },
  mkern = {
    arguments = {{delimiters = false, meta = "mudimen"}},
    details = "$ref:teximpatient#/data/mkern",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=235",
    summary = "Produce a specified kern in units of mu for math."
  },
  month = {
    details = "$ref:teximpatient#/data/month",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=245",
    summary = "Current month, as a number.",
    type = "number"
  },
  moveleft = {
    arguments = {
      {delimiters = false, meta = "dimen"},
      {delimiters = false, meta = "box"}
    },
    details = "$ref:teximpatient#/data/moveleft",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=186",
    summary = "Move a specified box left by a specified space; legal only in vertical modes."
  },
  moveright = {
    arguments = {
      {delimiters = false, meta = "dimen"},
      {delimiters = false, meta = "box"}
    },
    details = "$ref:teximpatient#/data/moveleft",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=186",
    summary = "Move a specified box right by a specified space; legal only in vertical modes."
  },
  mskip = {
    arguments = {
      {delimiters = {"", "plus"}, meta = "mudimen1"},
      {delimiters = {"", "minus"}, meta = "mudimen2"},
      {delimiters = false, meta = "mudimen3"}
    },
    details = "$ref:teximpatient#/data/mskip",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=235",
    summary = "Produce specified glue in units of mu for math."
  },
  multiply = {
    arguments = {
      {delimiters = {"", "by"}, meta = "register"},
      {delimiters = false, meta = "number"}
    },
    details = "$ref:teximpatient#/data/multiply",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=266",
    summary = "Multiply a specified \\count register by a specified integer."
  },
  muskip = {
    arguments = {{delimiters = false, meta = "register"}},
    details = "$ref:teximpatient#/data/count",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=262",
    summary = "The specified muglue register."
  },
  muskipdef = {
    arguments = {
      {delimiters = false, meta = "control sequence"},
      {literal = "=", optional = true},
      {delimiters = false, meta = "register"}
    },
    details = "$ref:teximpatient#/data/countdef",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=265",
    summary = "Define a specified control sequence to be a number corresponding to a \\muskip register."
  },
  newinsert = {
    documentation = "texmf:doc/plain/impatient/book.pdf#page=264",
    summary = "Name an insertion class, and reserve a corresponding \\box, \\count, \\dimen, and \\skip registers."
  },
  newlinechar = {
    details = "$ref:teximpatient#/data/newlinechar",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=270",
    summary = "End-of-line character for \\write, etc..",
    type = "number"
  },
  noalign = {
    arguments = {{meta = "horizontal mode material"}},
    details = "$ref:teximpatient#/data/noalign",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=203",
    summary = "Insert material between rows (or columns) of an alignment."
  },
  noboundary = {
    details = "$ref:teximpatient#/data/noboundary",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=121",
    summary = "Inhibit ligatures or kerns involving the current font’s boundarychar."
  },
  noexpand = {
    arguments = {{delimiters = false, meta = "token"}},
    details = "$ref:teximpatient#/data/noexpand",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=254",
    summary = "Suppress expansion of the next token."
  },
  noindent = {
    details = "$ref:teximpatient#/data/noindent",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=132",
    summary = "Enter horizontal mode without indenting the paragraph."
  },
  nolimits = {
    details = "$ref:teximpatient#/data/nolimits",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=215",
    summary = "Place superscript and subscript after large operators."
  },
  nonscript = {
    details = "$ref:teximpatient#/data/nonscript",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=235",
    summary = "Inhibit any following glue or kern when in script and scriptscript styles."
  },
  nonstopmode = {
    details = "$ref:teximpatient#/data/nonstopmode",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=273",
    summary = "Don’t stop at errors, even those about missing files."
  },
  nulldelimiterspace = {
    details = "$ref:teximpatient#/data/nulldelimiterspace",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=237",
    summary = "Space produced by a null delimiter, by default 1.2pt.",
    type = "dimen"
  },
  nullfont = {
    details = "$ref:teximpatient#/data/nullfont",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=122",
    summary = "Primitive font with no characters in it."
  },
  number = {
    arguments = {{delimiters = false, meta = "number"}},
    details = "$ref:teximpatient#/data/number",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=244",
    summary = "Produce a specified number as characters."
  },
  omit = {
    details = "$ref:teximpatient#/data/omit",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=201",
    summary = "Skip a column’s (or row’s) template in an alignment."
  },
  openin = {
    arguments = {
      {delimiters = false, meta = "number"},
      {literal = "=", optional = true},
      {delimiters = false, meta = "filename"}
    },
    details = "$ref:teximpatient#/data/openin",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=267",
    summary = "Prepare a specified input stream to read from a file."
  },
  openout = {
    arguments = {
      {delimiters = false, meta = "number"},
      {literal = "=", optional = true},
      {delimiters = false, meta = "filename"}
    },
    details = "$ref:teximpatient#/data/openout",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=269",
    summary = "Prepare a specified output stream to write to a file."
  },
  ["or"] = {summary = "Separate the cases of an \\ifcase."},
  outer = {
    details = "$ref:teximpatient#/data/outer",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=252",
    summary = "Make the following macro definition illegal in contexts in which tokens are absorbed at high speed."
  },
  output = {
    details = "$ref:teximpatient#/data/output",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=168",
    summary = "Token list TeX expands when it finds a page break.",
    type = "token list"
  },
  outputpenalty = {
    details = "$ref:teximpatient#/data/outputpenalty",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=169",
    summary = "If the page break occurred at a penalty, the value of that penalty; otherwise zero.",
    type = "number"
  },
  over = {
    details = "$ref:teximpatient#/data/over",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=220",
    summary = "Produce a fraction with a bar of default thickness."
  },
  overfullrule = {
    details = "$ref:teximpatient#/data/overfullrule",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=190",
    summary = "Width of the rule appended to an overfull box.",
    type = "dimen"
  },
  overline = {
    arguments = {{meta = "argument"}},
    details = "$ref:teximpatient#/data/underbrace",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=222",
    summary = "Produce a line covering the top of a formula, as in $\\overline{2b}$."
  },
  overwithdelims = {
    arguments = {
      {delimiters = false, meta = "delim1"},
      {delimiters = false, meta = "delim2"}
    },
    details = "$ref:teximpatient#/data/overwithdelims",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=221",
    summary = "Produce a fraction with a bar of the default thickness and surrounded by specified delimiters."
  },
  pagedepth = {
    details = "$ref:teximpatient#/data/pagedepth",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=159",
    summary = "TeX sets this to the current depth of the current page.",
    type = "dimen"
  },
  pagefilllstretch = {
    details = "$ref:teximpatient#/data/pagestretch",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=160",
    summary = "TeX sets this to the amount of filll stretch on the current page.",
    type = "dimen"
  },
  pagefillstretch = {
    details = "$ref:teximpatient#/data/pagestretch",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=160",
    summary = "TeX sets this to the amount of fill stretch on the current page.",
    type = "dimen"
  },
  pagefilstretch = {
    details = "$ref:teximpatient#/data/pagestretch",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=160",
    summary = "TeX sets this to the amount of fil stretch on the current page.",
    type = "dimen"
  },
  pagegoal = {
    details = "$ref:teximpatient#/data/pagegoal",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=159",
    summary = "TeX sets this to the desired height for the current page (i.e., \\vsize when the first box is put on the page).",
    type = "dimen"
  },
  pageshrink = {
    details = "$ref:teximpatient#/data/pageshrink",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=160",
    summary = "TeX sets this to the total amount of shrinkability on the current page.",
    type = "dimen"
  },
  pagestretch = {
    details = "$ref:teximpatient#/data/pagestretch",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=160",
    summary = "TeX sets this to the total amount of stretchability on the current page.",
    type = "dimen"
  },
  pagetotal = {
    details = "$ref:teximpatient#/data/pagetotal",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=159",
    summary = "TeX sets this to the natural height of the current page.",
    type = "dimen"
  },
  par = {
    documentation = "texmf:doc/plain/impatient/book.pdf#page=130",
    summary = "Finish paragraph and terminate horizontal mode."
  },
  parfillskip = {
    details = "$ref:teximpatient#/data/parfillskip",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=131",
    summary = "Horizontal glue TeX inserts at the end of a paragraph.",
    type = "glue"
  },
  parindent = {
    details = "$ref:teximpatient#/data/parindent",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=133",
    summary = "Horizontal space TeX inserts at the start of a paragraph.",
    type = "dimen"
  },
  parshape = {
    details = "$ref:teximpatient#/data/parshape",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=138",
    summary = "Specify the width and length of each line in the next paragraph."
  },
  parskip = {
    details = "$ref:teximpatient#/data/parskip",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=161",
    summary = "Vertical glue TeX inserts before a paragraph.",
    type = "glue"
  },
  pausing = {
    details = "$ref:teximpatient#/data/pausing",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=273",
    summary = "If positive, stop after reading each line of input for a possible replacement.",
    type = "number"
  },
  penalty = {
    arguments = {{delimiters = false, meta = "number"}},
    details = "$ref:teximpatient#/data/penalty",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=156",
    summary = "Produce penalty (or bonus, if negative) for breaking line or page here."
  },
  postdisplaypenalty = {
    details = "$ref:teximpatient#/data/postdisplaypenalty",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=158",
    summary = "Additional penalty for a line break just after a display, by default 0.",
    type = "number"
  },
  predisplaypenalty = {
    details = "$ref:teximpatient#/data/predisplaypenalty",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=158",
    summary = "Additional penalty for a line break just before a display, by default 0.",
    type = "number"
  },
  predisplaysize = {
    details = "$ref:teximpatient#/data/predisplaysize",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=236",
    summary = "TeX sets this to the width of the line preceding a display.",
    type = "dimen"
  },
  pretolerance = {
    details = "$ref:teximpatient#/data/pretolerance",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=143",
    summary = "Badness tolerance for line breaks without hyphenation, by default 100.",
    type = "number"
  },
  prevdepth = {
    details = "$ref:teximpatient#/data/prevdepth",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=154",
    summary = "Depth of the last nonrule box on the current vertical list.",
    type = "dimen"
  },
  prevgraf = {
    details = "$ref:teximpatient#/data/prevgraf",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=140",
    summary = "TeX sets this to the number of lines in the paragraph so far (in horizontal mode) or in the previous paragraph (in vertical mode).",
    type = "number"
  },
  radical = {
    arguments = {{delimiters = false, meta = "number"}},
    details = "$ref:teximpatient#/data/radical",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=227",
    summary = "Produce a specified radical symbol."
  },
  raise = {
    arguments = {
      {delimiters = false, meta = "dimen"},
      {delimiters = false, meta = "box"}
    },
    details = "$ref:teximpatient#/data/lower",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=186",
    summary = "Raise a specified box by a specified amount."
  },
  read = {
    documentation = "texmf:doc/plain/impatient/book.pdf#page=268",
    summary = "Read a line from a specified input stream."
  },
  relax = {
    details = "$ref:teximpatient#/data/relax",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=261",
    summary = "Do nothing."
  },
  relpenalty = {
    details = "$ref:teximpatient#/data/relpenalty",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=146",
    summary = "Additional penalty for breaking after a relation, by default 500.",
    type = "number"
  },
  right = {
    details = "$ref:teximpatient#/data/left",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=224",
    summary = "Produce the specified delimiter at the right end of a subformula started with \\left."
  },
  righthyphenmin = {
    details = "$ref:teximpatient#/data/lefthyphenmin",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=148",
    summary = "Size of the smallest word fragment TeX allows after a hyphen at the end of a word, by default 3.",
    type = "number"
  },
  rightskip = {
    details = "$ref:teximpatient#/data/leftskip",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=135",
    summary = "Glue TeX inserts at the right of each line.",
    type = "glue"
  },
  scriptfont = {
    arguments = {{delimiters = false, meta = "family"}},
    details = "$ref:teximpatient#/data/textfont",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=230",
    summary = "The script style font in a specified math family.",
    type = "fontname"
  },
  scriptscriptfont = {
    arguments = {{delimiters = false, meta = "family"}},
    details = "$ref:teximpatient#/data/textfont",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=230",
    summary = "The scriptscript style font in a specified math family.",
    type = "fontname"
  },
  scriptscriptstyle = {
    details = "$ref:teximpatient#/data/textstyle",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=218",
    summary = "Use scriptscriptstyle size in a formula."
  },
  scriptspace = {
    details = "$ref:teximpatient#/data/scriptspace",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=238",
    summary = "Additional space TeX kerns after a subscript or superscript, by default 0.5pt.",
    type = "dimen"
  },
  scriptstyle = {
    details = "$ref:teximpatient#/data/textstyle",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=218",
    summary = "Use scriptstyle size in a formula."
  },
  scrollmode = {
    details = "$ref:teximpatient#/data/scrollmode",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=272",
    summary = "Don’t stop at most errors, but do stop at errors about missing files."
  },
  setbox = {
    arguments = {
      {delimiters = false, meta = "register"},
      {literal = "=", optional = true},
      {delimiters = false, meta = "box"}
    },
    details = "$ref:teximpatient#/data/setbox",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=184",
    summary = "Define a specified box register to be a box."
  },
  setlanguage = {
    arguments = {{delimiters = false, meta = "number"}},
    details = "$ref:teximpatient#/data/setlanguage",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=148",
    summary = "Change to a specified set of hyphenation rules, but don’t change \\language."
  },
  sfcode = {
    arguments = {
      {delimiters = false, meta = "charcode"},
      {delimiters = false, meta = "number"}
    },
    details = "$ref:teximpatient#/data/spacefactor",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=127",
    summary = "The space factor code of a specified character."
  },
  shipout = {
    arguments = {{delimiters = false, meta = "box"}},
    details = "$ref:teximpatient#/data/shipout",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=168",
    summary = "Output a box to the .dvi file."
  },
  show = {
    arguments = {{delimiters = false, meta = "token"}},
    details = "$ref:teximpatient#/data/show",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=273",
    summary = "Show, in the log and on the terminal, the meaning of a specified token."
  },
  showbox = {
    arguments = {{delimiters = false, meta = "number"}},
    details = "$ref:teximpatient#/data/show",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=273",
    summary = "Display the contents of a specified box register."
  },
  showboxbreadth = {
    details = "$ref:teximpatient#/data/showboxbreadth",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=281",
    summary = "Maximum number of items shown on each nesting level, by default 5.",
    type = "number"
  },
  showboxdepth = {
    details = "$ref:teximpatient#/data/showboxdepth",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=281",
    summary = "Maximum nesting level shown, by default 3.",
    type = "number"
  },
  showlists = {
    details = "$ref:teximpatient#/data/show",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=273",
    summary = "Display all lists being worked on."
  },
  showthe = {
    arguments = {{meta = "argument"}},
    details = "$ref:teximpatient#/data/show",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=273",
    summary = "Show, in the log and on the terminal, what \\the would produce."
  },
  skewchar = {
    arguments = {{delimiters = false, meta = "font"}},
    details = "$ref:teximpatient#/data/skewchar",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=233",
    summary = "Character in a specified font used for positioning accents.",
    type = "number"
  },
  skip = {
    arguments = {{delimiters = false, meta = "register"}},
    details = "$ref:teximpatient#/data/count",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=262",
    summary = "The specified glue register."
  },
  skipdef = {
    arguments = {
      {delimiters = false, meta = "control sequence"},
      {literal = "=", optional = true},
      {delimiters = false, meta = "register"}
    },
    details = "$ref:teximpatient#/data/countdef",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=265",
    summary = "Define a specified control sequence to be a number corresponding to a \\skip register."
  },
  spacefactor = {
    details = "$ref:teximpatient#/data/spacefactor",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=127",
    summary = "Modifies stretch and shrink of interword glue if not 1000.",
    type = "number"
  },
  spaceskip = {
    details = "$ref:teximpatient#/data/spacefactor",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=127",
    summary = "If nonzero and \\spacefactor < 2000, overrides the normal interword glue.",
    type = "glue"
  },
  span = {
    details = "$ref:teximpatient#/data/span",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=201",
    summary = "Either combine entries in an alignment body or expand tokens in a preamble."
  },
  special = {
    arguments = {{meta = "token list"}},
    details = "$ref:teximpatient#/data/special",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=270",
    summary = "Write tokens to the .dvi file to be interpreted by a DVI-reading program."
  },
  splitbotmark = {
    details = "$ref:teximpatient#/data/splitfirstmark",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=164",
    summary = "Last mark item in a box resulting from \\vsplit."
  },
  splitfirstmark = {
    details = "$ref:teximpatient#/data/splitfirstmark",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=164",
    summary = "First mark item in a box resulting from \\vsplit."
  },
  splitmaxdepth = {
    details = "$ref:teximpatient#/data/splitmaxdepth",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=170",
    summary = "Maximum depth of a box resulting from \\vsplit.",
    type = "dimen"
  },
  splittopskip = {
    details = "$ref:teximpatient#/data/splittopskip",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=170",
    summary = "Glue TeX inserts at the top of a box resulting from \\vsplit.",
    type = "glue"
  },
  string = {
    arguments = {{delimiters = false, meta = "control sequence"}},
    details = "$ref:teximpatient#/data/string",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=246",
    summary = "Produce a specified token, most commonly a control sequence, as characters."
  },
  tabskip = {
    details = "$ref:teximpatient#/data/tabskip",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=204",
    summary = "Glue between columns (or rows) of an alignment.",
    type = "glue"
  },
  textfont = {
    arguments = {{delimiters = false, meta = "family"}},
    details = "$ref:teximpatient#/data/textfont",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=230",
    summary = "The text style font in a specified math family.",
    type = "fontname"
  },
  textstyle = {
    details = "$ref:teximpatient#/data/textstyle",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=218",
    summary = "Use textstyle size in a formula."
  },
  the = {
    arguments = {{delimiters = false, meta = "token"}},
    details = "$ref:teximpatient#/data/the",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=254",
    summary = "Give the value of a specified token."
  },
  thickmuskip = {
    details = "$ref:teximpatient#/data/thinmuskip",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=234",
    summary = "Glue for a thick math space, by default 5mu plus 5mu.",
    type = "muglue"
  },
  thinmuskip = {
    details = "$ref:teximpatient#/data/thinmuskip",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=234",
    summary = "Glue for a thin math space, by default 3mu.",
    type = "muglue"
  },
  time = {
    details = "$ref:teximpatient#/data/time",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=244",
    summary = "The time of day, in minutes since midnight.",
    type = "number"
  },
  toks = {
    arguments = {{delimiters = false, meta = "register"}},
    details = "$ref:teximpatient#/data/count",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=262",
    summary = "The specified token register."
  },
  toksdef = {
    arguments = {
      {delimiters = false, meta = "control sequence"},
      {literal = "=", optional = true},
      {delimiters = false, meta = "register"}
    },
    details = "$ref:teximpatient#/data/countdef",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=265",
    summary = "Define a specified control sequence to be a number corresponding to a \\toks register."
  },
  tolerance = {
    details = "$ref:teximpatient#/data/pretolerance",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=143",
    summary = "Badness tolerance for line breaks with hyphenation.",
    type = "number"
  },
  topmark = {
    details = "$ref:teximpatient#/data/firstmark",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=164",
    summary = "\\botmark before the current page was boxed."
  },
  topskip = {
    details = "$ref:teximpatient#/data/topskip",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=161",
    summary = "Glue between the headline and the first line of text on a page, by default 10pt.",
    type = "glue"
  },
  tracingcommands = {
    details = "$ref:teximpatient#/data/tracingcommands",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=277",
    summary = "Display execution of commands.",
    type = "number"
  },
  tracinglostchars = {
    details = "$ref:teximpatient#/data/tracinglostchars",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=277",
    summary = "Display characters that are asked for, but not defined.",
    type = "number"
  },
  tracingmacros = {
    details = "$ref:teximpatient#/data/tracingmacros",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=278",
    summary = "Display macro expansions.",
    type = "number"
  },
  tracingonline = {
    details = "$ref:teximpatient#/data/tracingonline",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=276",
    summary = "Show diagnostic output on the terminal as well as in the log file.",
    type = "number"
  },
  tracingoutput = {
    details = "$ref:teximpatient#/data/tracingoutput",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=278",
    summary = "Display contents of shipped-out boxes.",
    type = "number"
  },
  tracingpages = {
    details = "$ref:teximpatient#/data/tracingpages",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=279",
    summary = "Display page break calculations.",
    type = "number"
  },
  tracingparagraphs = {
    details = "$ref:teximpatient#/data/tracingparagraphs",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=280",
    summary = "Display line break calculations.",
    type = "number"
  },
  tracingrestores = {
    details = "$ref:teximpatient#/data/tracingrestores",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=280",
    summary = "Display values restored at the end of a group.",
    type = "number"
  },
  tracingstats = {
    details = "$ref:teximpatient#/data/tracingstats",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=280",
    summary = "Display memory usage statistics.",
    type = "number"
  },
  uccode = {
    arguments = {
      {delimiters = false, meta = "charcode"},
      {delimiters = false, meta = "number"}
    },
    details = "$ref:teximpatient#/data/lccode",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=123",
    summary = "The character code for the uppercase form of a letter."
  },
  uchyph = {
    details = "$ref:teximpatient#/data/uchyph",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=148",
    summary = "If positive, consider hyphenating words that start with a capital letter.",
    type = "number"
  },
  underline = {
    arguments = {{meta = "argument"}},
    details = "$ref:teximpatient#/data/underbrace",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=222",
    summary = "Underline a math formula below the descenders, as in $\\underline{x+y}$."
  },
  unhbox = {
    arguments = {{delimiters = false, meta = "register"}},
    details = "$ref:teximpatient#/data/unhbox",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=185",
    summary = "Append the contents of the box in a specified box register to the current list, and void the register; legal only in horizontal modes."
  },
  unhcopy = {
    arguments = {{delimiters = false, meta = "register"}},
    details = "$ref:teximpatient#/data/unhcopy",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=185",
    summary = "Like \\unhbox, but doesn’t void the register."
  },
  unkern = {
    details = "$ref:teximpatient#/data/unkern",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=192",
    summary = "If the last item on the current list is a kern, remove it."
  },
  unpenalty = {
    details = "$ref:teximpatient#/data/unkern",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=192",
    summary = "If the last item on the current list is a penalty, remove it."
  },
  unskip = {
    details = "$ref:teximpatient#/data/unkern",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=192",
    summary = "If the last item on the current list is glue, remove it."
  },
  unvbox = {
    arguments = {{delimiters = false, meta = "register"}},
    details = "$ref:teximpatient#/data/unhbox",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=185",
    summary = "Append the contents of the box in a specified box register to the current list, and void the register; legal only in vertical modes."
  },
  unvcopy = {
    arguments = {{delimiters = false, meta = "register"}},
    details = "$ref:teximpatient#/data/unhcopy",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=185",
    summary = "Like \\unvbox, but doesn’t void the register."
  },
  uppercase = {
    arguments = {{meta = "token list"}},
    details = "$ref:teximpatient#/data/lowercase",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=124",
    summary = "Convert lowercase letters in the specified text to uppercase."
  },
  vadjust = {
    arguments = {{meta = "vertical mode material"}},
    details = "$ref:teximpatient#/data/vadjust",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=140",
    summary = "Produce vertical mode material after the current line."
  },
  valign = {
    arguments = {
      {delimiters = {"to", ""}, meta = "dimen", optional = true},
      {delimiters = {"spread", ""}, meta = "dimen", optional = true},
      {delimiters = {"{", "}"}, meta = "columns"}
    },
    details = "$ref:teximpatient#/data/valign",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=199",
    summary = "Align text in rows."
  },
  vbadness = {
    details = "$ref:teximpatient#/data/hbadness",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=190",
    summary = "Badness threshold for reporting underfull or overfull vboxes, by default 1000.",
    type = "number"
  },
  vbox = {
    arguments = {
      {delimiters = {"to", ""}, meta = "dimen", optional = true},
      {delimiters = {"spread", ""}, meta = "dimen", optional = true},
      {delimiters = {"{", "}"}, meta = "vertical mode material"}
    },
    details = "$ref:teximpatient#/data/vtop",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=181",
    summary = "Produce a vbox whose baseline is that of the bottom box enclosed."
  },
  vcenter = {
    arguments = {{meta = "vertical mode material"}},
    details = "$ref:teximpatient#/data/vcenter",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=233",
    summary = "Center the specified text on the math axis."
  },
  vfil = {
    details = "$ref:teximpatient#/data/hfil",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=177",
    summary = "Produce infinitely stretchable vertical glue."
  },
  vfill = {
    details = "$ref:teximpatient#/data/hfil",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=177",
    summary = "Produce even more infinitely stretchable vertical glue than that produced by \\vfil."
  },
  vfilneg = {
    details = "$ref:teximpatient#/data/hfilneg",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=179",
    summary = "Produce infinitely negative stretchable vertical glue."
  },
  vfuzz = {
    details = "$ref:teximpatient#/data/hfuzz",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=191",
    summary = "Space threshold for reporting overfull vboxes, by default 0.1pt.",
    type = "dimen"
  },
  voffset = {
    details = "$ref:teximpatient#/data/hoffset",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=160",
    summary = "Vertical offset relative to one inch from the paper’s top edge.",
    type = "dimen"
  },
  vrule = {
    arguments = {
      {delimiters = {"width", ""}, meta = "dimen", optional = true},
      {delimiters = {"height", ""}, meta = "dimen", optional = true},
      {delimiters = {"depth", ""}, meta = "dimen", optional = true}
    },
    details = "$ref:teximpatient#/data/hrule",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=192",
    summary = "Produce a vertical rule; legal only in horizontal modes."
  },
  vsize = {
    details = "$ref:teximpatient#/data/vsize",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=160",
    summary = "Page height, by default 8.9in.",
    type = "dimen"
  },
  vskip = {
    arguments = {
      {delimiters = {"", "plus"}, meta = "dimen1"},
      {delimiters = {"", "minus"}, meta = "dimen2"},
      {delimiters = false, meta = "dimen3"}
    },
    details = "$ref:teximpatient#/data/hskip",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=175",
    summary = "Produce specified vertical glue."
  },
  vsplit = {
    arguments = {
      {delimiters = {"", "to"}, meta = "number"},
      {delimiters = false, meta = "dimen"}
    },
    details = "$ref:teximpatient#/data/vsplit",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=169",
    summary = "Break the contents of a specified box register to the specified height."
  },
  vss = {
    details = "$ref:teximpatient#/data/hss",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=178",
    summary = "Produce vertical glue that is infinitely stretchable and infinitely shrinkable."
  },
  vtop = {
    arguments = {
      {delimiters = {"to", ""}, meta = "dimen", optional = true},
      {delimiters = {"spread", ""}, meta = "dimen", optional = true},
      {delimiters = {"{", "}"}, meta = "vertical mode material"}
    },
    details = "$ref:teximpatient#/data/vtop",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=181",
    summary = "Produce a vbox whose baseline is that of the top box enclosed."
  },
  wd = {
    arguments = {{delimiters = false, meta = "register"}},
    details = "$ref:teximpatient#/data/ht",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=187",
    summary = "The width of the box in a specified box register.",
    type = "dimen"
  },
  widowpenalty = {
    details = "$ref:teximpatient#/data/widowpenalty",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=158",
    summary = "Penalty for a single line beginning a page, by default 150.",
    type = "number"
  },
  write = {
    arguments = {{delimiters = false, meta = "number"}, {meta = "token list"}},
    details = "$ref:teximpatient#/data/write",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=269",
    summary = "Write a line to a specified output stream."
  },
  xdef = {
    action = "def",
    arguments = {
      {delimiters = false, meta = "control sequence"},
      {delimiters = {"", "{"}, meta = "parameter text"},
      {delimiters = {"", "}"}, meta = "replacement text"}
    },
    details = "$ref:teximpatient#/data/xdef",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=251",
    summary = "Equivalent to \\global\\edef, i.e., globally define a macro, immediately expanding the replacement text."
  },
  xleaders = {
    arguments = {
      {delimiters = false, meta = "box or rule"},
      {delimiters = false, meta = "skip command"}
    },
    details = "$ref:teximpatient#/data/leaders",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=194",
    summary = "Produce leaders with leftover space distributed equally between the leader boxes."
  },
  xspaceskip = {
    details = "$ref:teximpatient#/data/spacefactor",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=127",
    summary = "If nonzero and \\spacefactor ≥ 2000, overrides the normal interword glue.",
    type = "glue"
  },
  year = {
    details = "$ref:teximpatient#/data/year",
    documentation = "texmf:doc/plain/impatient/book.pdf#page=245",
    summary = "The current year, as a number.",
    type = "number"
  }
}
